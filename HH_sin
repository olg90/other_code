import numpy as np
import os
import pandas as pd
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

def read_data(ftype, fname):
    excel_dir = r'C:\Users\ogamb\OneDrive\Desktop\current data\excel_files'
    txt_dir = r'C:\Users\ogamb\OneDrive\Desktop\current data\txt_files'
    
    if ftype == 0:  # Excel file
        file_path = os.path.join(excel_dir, fname)
        data = pd.read_csv(file_path)
        return np.array(data)
    elif ftype == 1:  # Text file
        file_path = os.path.join(txt_dir, fname)
        data = pd.read_csv(file_path, header=None).values.flatten()
        return data
    else:
        print("Invalid file type. Please provide 0 for Excel file or 1 for text file.")

def get_filenames():
    excel_dir = r'C:\Users\ogamb\OneDrive\Desktop\current data\excel_files'
    txt_dir = r'C:\Users\ogamb\OneDrive\Desktop\current data\txt_files'
    
    excel_files = [f for f in os.listdir(excel_dir) if os.path.isfile(os.path.join(excel_dir, f))]
    txt_files = [f for f in os.listdir(txt_dir) if os.path.isfile(os.path.join(txt_dir, f))]
    
    return excel_files, txt_files

############################################################

# current functions

def I_A(gA,a,b,c,V,VK):
    return gA*a**4*b*c*(V-VK)

def I_LT(gLT,w,z,V,VK):
    return gLT*w**4*z*(V-VK)

def I_HT(gHT,n,p,V,VK):
    phi=0.85
    return gHT*(phi*n**2+(1-phi)*p)*(V-VK)

def I_Na(gNA, m, h, V, VNa):
    return gNA*m**3*h*(V-VNa)

def I_h(gh,r,V,Vh):
    return gh*r*(V-Vh)

def I_lk(glk,V,Vlk):
    return glk*(V-Vlk)

def I_E(gE,t,tauE):
    return gE*t/tauE*np.exp(1-t/tauE)

# =============================================================================
# def I_ext(t, amplitude, frequency):
#     return amplitude * np.sin(2 * np.pi * frequency * t)
# =============================================================================

def I_ext(t, amplitude):
    f0 = 2.5            # Start frequency (Hz)
    f1 = 2000         # End frequency (Hz)
    t1_ms = 20000     # Duration of the chirp (milliseconds)
    t1 = t1_ms / 1000  # Convert duration to seconds
    k = (f1 - f0) / t1

    return amplitude * np.sin(2 * np.pi * (f0 * t + 0.5 * k * t**2))


# coefficient functions

def get_x(xinf, x, taux):
    return (xinf-x)/taux

def ainf(V):
    return (1+np.exp(-(V+31)/6))**(-1/4)
def binf(V):
    return (1+np.exp(V+66/7))**(-1/2)
def cinf(V):
    return (1+np.exp(V+66/7))**(-1/2)

def winf(V):
    return (1+np.exp(-(V+48))/6)**(-1/4)
def zinf(V):
    zeta=0.5
    return (1-zeta)*(1+np.exp((V+71)/10))**(-1)+zeta

def ninf(V):
    return (1+np.exp(-(V+15)/5))**(-1/2)
def pinf(V):
    return (1+np.exp(-(V+23)/6))**(-1)

def minf(V):
    return (1+np.exp(-(V+38)/7))**(-1)
def hinf(V):
    return (1+np.exp((V+65)/6))**(-1)

def rinf(V):
    return (1+np.exp((V+76)/7))**(-1)

# tau functions

def taua(V):
    return 100*(7*np.exp((V+60)/14)+29*np.exp(-(V+60)/24))**(-1)+0.1
def taub(V):
    return 1000*(14*np.exp((V+60)/27)+29*np.exp(-(V+60)/24))**(-1)+1
def tauc(V):
    return 90*(1+np.exp(-(V+66)/17))**(-1)+10
def tauw(V):
    return 100*(6*np.exp((V+60)/6)+16*np.exp(-(V+60)/45))**(-1)+1.5
def tauz(V):
    return 1000*(np.exp((V+60)/20)+np.exp(-(V+60)/8))**(-1)+50

def taun(V):
    return 100*(11*np.exp((V+60)/24)+21*np.exp(-(V+60)/23))**(-1)+0.7
def taup(V):
    return 100*(4*np.exp((V+60)/32)+5*np.exp(-(V+60)/22))**(-1)+5

def taum(V):
    return 10*(5*np.exp((V+60))+36*np.exp(-(V+60)/25))**(-1)+0.04
def tauh(V):
    return 100*(7*np.exp((V+60)/11)+10*np.exp(-(V+60)/25))**(-1)+0.6

def taur(V):
    return 10**5*(237*np.exp((V+60)/12)+17*np.exp(-(V+60)/14))**(-1)+25

# Hodgkin-Huxley parameters

def dXdt(t, X):
    V, a,b,c, w,z, n,p, m,h, r = X # all defined variables values go here

    dVdt=1/(C_m)*(I_A(gA,a,b,c,V,VK)+ # anions
                  I_LT(gLT,w,z,V,VK)+ # calcium
                  I_HT(gHT,n,p,V,VK)+ # calcium
                  I_Na(gNa,m,h,V,VNa)+ # sodium
                  I_h(gh,r,V,Vh)+ # 
                  I_lk(glk,V,Vlk)+ # leakage
                  I_E(gE,t,tauE)
                  -I_ext(t, amplitude))

    dadt = get_x(ainf(V),a,taua(V))
    dbdt = get_x(binf(V),b,taub(V))
    dcdt = get_x(cinf(V),c,tauc(V))

    dwdt = get_x(winf(V), w, tauw(V))
    dzdt = get_x(zinf(V), z, tauz(V))

    dndt = get_x(ninf(V), n, taun(V))
    dpdt = get_x(pinf(V), p, taup(V))

    dmdt = get_x(minf(V), m, taum(V))
    dhdt = get_x(hinf(V), h, tauh(V))

    drdt = get_x(rinf(V), r, taur(V))

    return [dVdt, dadt, dbdt, dcdt, dwdt, dzdt, dndt, dpdt, dmdt, dhdt, drdt]

###############################################################################

data = np.genfromtxt(r'C:\Users\ogamb\OneDrive\Desktop\Finput450_NumInputs20.csv', delimiter=',')

enames, tnames = get_filenames()


# Paremeter values (27 parameters) -----------------------------------------

C_m = 12  # membrane capacitance (uF/cm^2)

gA=0 # fast activating K+ conductance
gLT=0 # Low threshold K+ conductance
gHT=150 # High threshold K+ conductance
gNa=1000 # Fast activating sodium conductance
gh=0.5 # Hyperpolarization-conductance
glk=2 # Leakage conductance
gE=0.7 # Excitatory synaptic conductance

VK = -70 # potassium reverse potential
VNa = 55 # sodium reverse potential
Vh = -43 # hyperpolarizing reverse potential
Vlk = -65 # leakage reverse potential
VE = 0 # excitatory reverse potential

tauE=1.5 # delete e-3

amplitude = 100

# Initial conditions

V0 = -65.0  # initial membrane potential (mV), 
a0 = 0.32 # Don't know # Fast transient K+ current
b0 = 0.32 # Don't know
c0 = 0.32 # Don't know
w0 = 0.32 # Don't know # Low-threshold K+ current
z0 = 0.32 # Don't know
n0 = 0.32   # potassium gating variable # High-threshold K+ current
p0 = 0.05 # Don't know
m0 = 0.05   # sodium activation gating variable
h0 = 0.6    # sodium inactivation gating variable
r0 = 0.32 # Don't know

# Time vector
t_span = (0, 20000)  # simulation time span
t_eval = np.linspace(*t_span, 20000)  # time points to evaluate

# Solve ODE
sol = solve_ivp(dXdt, t_span, [V0,a0,b0,c0,w0,z0,n0,p0,m0,h0,r0], t_eval=t_eval)

# Use solve_ivp from scipy.integrate to solve the system of ODEs (dXdt)
# with the specified initial conditions ([V0, m0, h0, n0])
# and evaluate the solution at the specified time points (t_eval).
#%%
# Plot results
fs=15
plt.title('HH model - chirp input from 2.5 Hz to 2kHz', fontsize=fs)
plt.xlabel('Time (ms)', fontsize=fs)
plt.ylabel('Membrane Potential (mV)', fontsize=fs)
plt.plot(np.linspace(5000, 25000, 20000), sol.y[0]/1000, 
         label='Hodgkin-Huxley-type model')
plt.plot(data[:, 0], label='Finput450_NumInputs20_V')
plt.tick_params(axis='both', labelsize=fs)
# =============================================================================
# plt.plot(data[:, 1], label='Finput450_NumInputs20_Ge')
# =============================================================================
plt.grid(True, alpha = 0.3)
plt.legend(fontsize=fs)
plt.tight_layout()
plt.show()

# =============================================================================
# 
# fname=enames[19]
# print(fname)
# data = read_data(0, fname)  # Read the first text file
# plt.plot(data[:, 0], label='{}'.format(fname));
# plt.legend(loc='upper right')
# plt.show()
# =============================================================================


