import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# current functions

def I_A(gA,a,b,c,V,VK):
    return gA*a**4*b*c*(V-VK)

def I_LT(gLT,w,z,V,VK):
    return gLT*w**4*z*(V-VK)

def I_HT(gHT,n,p,V,VK):
    phi=0.85
    return gHT*(phi*n**2+(1-phi)*p)*(V-VK)

def I_Na(gNA, m, h, V, VNa):
    return gNA*m**3*h*(V-VNa)

def I_h(gh,r,V,Vh):
    return gh*r*(V-Vh)

def I_lk(glk,V,Vlk):
    return glk*(V-Vlk)

def I_E(gE,t,tauE):
    return gE*t/tauE*np.exp(1-t/tauE)

def I_ext(t, amplitude, frequency):
    return amplitude * np.sin(2 * np.pi * frequency * t)

# coefficient functions

def get_x(xinf, x, taux):
    return (xinf-x)/taux

def ainf(V):
    return (1+np.exp(-(V+31)/6))**(-1/4)
def binf(V):
    return (1+np.exp(V+66/7))**(-1/2)
def cinf(V):
    return (1+np.exp(V+66/7))**(-1/2)

def winf(V):
    return (1+np.exp(-(V+48))/6)**(-1/4)
def zinf(V):
    zeta=0.5
    return (1-zeta)*(1+np.exp((V+71)/10))**(-1)+zeta

def ninf(V):
    return (1+np.exp(-(V+15)/5))**(-1/2)
def pinf(V):
    return (1+np.exp(-(V+23)/6))**(-1)

def minf(V):
    return (1+np.exp(-(V+38)/7))**(-1)
def hinf(V):
    return (1+np.exp((V+65)/6))**(-1)

def rinf(V):
    return (1+np.exp((V+76)/7))**(-1)

# tau functions

def taua(V):
    return 100*(7*np.exp((V+60)/14)+29*np.exp(-(V+60)/24))**(-1)+0.1
def taub(V):
    return 1000*(14*np.exp((V+60)/27)+29*np.exp(-(V+60)/24))**(-1)+1
def tauc(V):
    return 90*(1+np.exp(-(V+66)/17))**(-1)+10
def tauw(V):
    return 100*(6*np.exp((V+60)/6)+16*np.exp(-(V+60)/45))**(-1)+1.5
def tauz(V):
    return 1000*(np.exp((V+60)/20)+np.exp(-(V+60)/8))**(-1)+50

def taun(V):
    return 100*(11*np.exp((V+60)/24)+21*np.exp(-(V+60)/23))**(-1)+0.7
def taup(V):
    return 100*(4*np.exp((V+60)/32)+5*np.exp(-(V+60)/22))**(-1)+5

def taum(V):
    return 10*(5*np.exp((V+60))+36*np.exp(-(V+60)/25))**(-1)+0.04
def tauh(V):
    return 100*(7*np.exp((V+60)/11)+10*np.exp(-(V+60)/25))**(-1)+0.6

def taur(V):
    return 10**5*(237*np.exp((V+60)/12)+17*np.exp(-(V+60)/14))**(-1)+25

# Hodgkin-Huxley parameters

def dXdt(t, X):
    V, a,b,c, w,z, n,p, m,h, r = X # all defined variables values go here

    dVdt=1/(C_m)*(I_A(gA,a,b,c,V,VK)+
                  I_LT(gLT,w,z,V,VK)+
                  I_HT(gHT,n,p,V,VK)+
                  I_Na(gNa,m,h,V,VNa)+
                  I_h(gh,r,V,Vh)+
                  I_lk(glk,V,Vlk)+
                  I_E(gE,t,tauE)
                  -I_ext(t, amplitude, frequency))

    dadt = get_x(ainf(V),a,taua(V))
    dbdt = get_x(binf(V),b,taub(V))
    dcdt = get_x(cinf(V),c,tauc(V))

    dwdt = get_x(winf(V), w, tauw(V))
    dzdt = get_x(zinf(V), z, tauz(V))

    dndt = get_x(ninf(V), n, taun(V))
    dpdt = get_x(pinf(V), p, taup(V))

    dmdt = get_x(minf(V), m, taum(V))
    dhdt = get_x(hinf(V), h, tauh(V))

    drdt = get_x(rinf(V), r, taur(V))

    return [dVdt, dadt, dbdt, dcdt, dwdt, dzdt, dndt, dpdt, dmdt, dhdt, drdt]

###############################################################################

data = np.genfromtxt(r'C:\Users\olgud\OneDrive\Desktop\PhD\3-Research\Neuron\Finput450_NumInputs20.csv', delimiter=',')



# Paremeter values 

C_m = 1.0   # membrane capacitance (uF/cm^2)
g_Na = 120.0  # maximum conductances (mS/cm^2)
g_K = 36.0
g_L = 0.3
E_Na = 50.0   # reversal potentials (mV)
E_K = -77.0
E_L = -54.387

gA=0
gLT=0
gHT=150
gNa=1000
gh=0.5
glk=2
gE=0.7

VK = -70
VNa = 55
Vh = -43
Vlk = -65
VE = 0

tauE=0.4

amplitude = 10
frequency = 0.5

# Define the system of ordinary differential equations (ODEs)
# describing the Hodgkin-Huxley model.
# This function dXdt(t, X) computes the derivatives of the state variables
# V (membrane potential), m (sodium activation gating variable),
# h (sodium inactivation gating variable), and n (potassium gating variable).

# Initial conditions

V0 = -65.0  # initial membrane potential (mV)
a0 = 0.32 # Don't know
b0 = 0.32 # Don't know
c0 = 0.32 # Don't know
w0 = 0.32 # Don't know
z0 = 0.32 # Don't know
n0 = 0.32   # initial potassium gating variable
p0 = 0.05 # Don't know
m0 = 0.05   # initial sodium activation gating variable
h0 = 0.6    # initial sodium inactivation gating variable
r0 = 0.32 # Don't know

# Time vector
t_span = (0, 100)  # simulation time span
t_eval = np.linspace(*t_span, 1000)  # time points to evaluate

# Solve ODE
sol = solve_ivp(dXdt, t_span, [V0, a0, b0,c0,w0,z0,n0,p0,m0,h0,r0], t_eval=t_eval)

# Use solve_ivp from scipy.integrate to solve the system of ODEs (dXdt)
# with the specified initial conditions ([V0, m0, h0, n0])
# and evaluate the solution at the specified time points (t_eval).

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(sol.t, sol.y[0], label='Membrane Potential (mV)')
plt.xlabel('Time (ms)')
plt.ylabel('Membrane Potential (mV)')
plt.title('Hodgkin-Huxley Model with Sinusoidal Current')
plt.legend()
plt.grid(True)

# =============================================================================
# plt.plot(data[:, 0], label='Finput450_NumInputs20_V')
# plt.plot(data[:, 1], label='Finput450_NumInputs20_Ge')
# =============================================================================
plt.show()

# Plot the membrane potential over time from the ODE solution.
# This visualizes the dynamics of the Hodgkin-Huxley model
# with an external sinusoidal current input.

