import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# Constants
C_m = 1.0   # membrane capacitance (uF/cm^2)
g_Na = 120.0  # maximum conductances (mS/cm^2)
g_K = 36.0
g_L = 0.3
E_Na = 50.0   # reversal potentials (mV)
E_K = -77.0
E_L = -54.387

# Define model constants: membrane capacitance (C_m),
# maximum conductances of sodium (g_Na), potassium (g_K), and leak (g_L) channels,
# and reversal potentials for sodium (E_Na), potassium (E_K), and leak (E_L).

# Channel gating kinetics
def alpha_m(V):
    return 0.1*(V + 40.0) / (1.0 - np.exp(-(V + 40.0) / 10.0))

def beta_m(V):
    return 4.0 * np.exp(-(V + 65.0) / 18.0)

def alpha_h(V):
    return 0.07 * np.exp(-(V + 65.0) / 20.0)

def beta_h(V):
    return 1.0 / (1.0 + np.exp(-(V + 35.0) / 10.0))

def alpha_n(V):
    return 0.01*(V + 55.0) / (1.0 - np.exp(-(V + 55.0) / 10.0))

def beta_n(V):
    return 0.125 * np.exp(-(V + 65) / 80.0)

# Define functions for voltage-dependent rate constants (alpha and beta)
# for the activation (m) and inactivation (h) of sodium channels,
# and for the activation (n) of potassium channels.

# Membrane currents
def I_Na(V, m, h):
    return g_Na * m**3 * h * (V - E_Na)

def I_K(V, n):
    return g_K  * n**4 * (V - E_K)

def I_L(V):
    return g_L * (V - E_L)

# External current
def I_ext(t, frequency=0.1, amplitude=10):
    return amplitude * np.sin(2 * np.pi * frequency * t)

# Define an external sinusoidal current function (I_ext)
# with specified frequency and amplitude.

# Hodgkin-Huxley equations
def dXdt(t, X):
    V, m, h, n = X
    
    dVdt = (I_ext(t) - I_Na(V, m, h) - I_K(V, n) - I_L(V)) / C_m
    dmdt = alpha_m(V)*(1.0 - m) - beta_m(V)*m
    dhdt = alpha_h(V)*(1.0 - h) - beta_h(V)*h
    dndt = alpha_n(V)*(1.0 - n) - beta_n(V)*n
    
    return [dVdt, dmdt, dhdt, dndt]

# Define the system of ordinary differential equations (ODEs)
# describing the Hodgkin-Huxley model.
# This function dXdt(t, X) computes the derivatives of the state variables
# V (membrane potential), m (sodium activation gating variable),
# h (sodium inactivation gating variable), and n (potassium gating variable).

# Initial conditions
V0 = -65.0  # initial membrane potential (mV)
m0 = 0.05   # initial sodium activation gating variable
h0 = 0.6    # initial sodium inactivation gating variable
n0 = 0.32   # initial potassium gating variable

# Time vector
t_span = (0, 100)  # simulation time span
t_eval = np.linspace(*t_span, 1000)  # time points to evaluate

# Solve ODE
sol = solve_ivp(dXdt, t_span, [V0, m0, h0, n0], t_eval=t_eval)

# Use solve_ivp from scipy.integrate to solve the system of ODEs (dXdt)
# with the specified initial conditions ([V0, m0, h0, n0])
# and evaluate the solution at the specified time points (t_eval).

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(sol.t, sol.y[0], label='Membrane Potential (mV)')
plt.xlabel('Time (ms)')
plt.ylabel('Membrane Potential (mV)')
plt.title('Hodgkin-Huxley Model with Sinusoidal Current')
plt.legend()
plt.grid(True)
plt.show()

# Plot the membrane potential over time from the ODE solution.
# This visualizes the dynamics of the Hodgkin-Huxley model
# with an external sinusoidal current input.
