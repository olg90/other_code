import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial
# =============================================================================
#      no -> no + 1   with rate   K*(M-n-r), where K is: (-): k/(1+k1 z)
#                                             (+):kb+(k-kb)( k1 z / (1+ k1 z))
# 
# 
#      n -> n - b   with rate   f
#      r -> r + b
#      z -> z + cb
# 
# 
#      r -> r - 1   with rate   kr * r
#                   
# 
#      z -> z - 1     with rate   gammaz*z
# ============================================================================= 

def get_FF(x):
    return np.var(x)/np.mean(x)

def kreg(z, k, k1, kb, ftype):
    if ftype=='n':
        return k/(1+k1*z)
    if ftype=='p':
        return kb+(k-kb)*(k1*z/(1+k1*z))
    if ftype=='u':
        return k

def simulate(f, pr, M, n, r, z, k, kr, gammaz, cz, ftype, tmax, delta_t):

        nlist=[n]
        zlist=[z]
        rlist=[r]

        tlist=[0]
        APlist=[]

        tcurr=0

        timer = delta_t
        kr_timer = 1/kr
        
        ratio = 0.3
        
        while tcurr < tmax:

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3 = kr_timer
            t4 = timer

            if t0<t1 and t0<t2 and t0<t3 and t0<t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                kr_timer-=tmin

            elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
                kr_timer-=tmin

            elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
                kr_timer-=tmin
                
            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-1
                tmin = t3
                timer -= tmin
                kr_timer=1/kr

            else:
                tmin=timer
                kr_timer-=tmin
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)

            tcurr += tmin

        return tlist, nlist, rlist, zlist, APlist
    
def simulate_kr_inf(f, pr, M, n, r, z, k, gammaz, cz, ftype, tmax, delta_t):
        nlist=[n]
        rlist=[r]
        zlist=[z]
        tlist=[0]        
        APlist=[]

        tcurr=0
# =============================================================================
#         delta_t = 0.1 # longer than the typical autocorrelation time of the system
#         # longer than the typical duration of the shortest reaction
# =============================================================================
        timer = delta_t
        ratio=0.3

        while tcurr < tmax:
            
            # Get the three event times
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n) + 1e-6)) # empty to occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove 1 neurotransmitter
            t3 = timer

            # Choose the smallest one and then make that event happen
            if t0 < t1 and t0 < t2 and t0 < t3: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                z = z + cz*b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                tcurr+=tmin

            elif t1<t0 and t1<t2 and t1<t3: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
                tcurr+=tmin

            elif t2<t0 and t2<t1 and t2<t3: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
                tcurr+=tmin

            else:
                tmin=timer
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            tcurr+=tmin
            
        return tlist, nlist, rlist, zlist, APlist
    
###############################################################################
#
#                               Parameters
#
###############################################################################

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100

n=M # occupied states
r=0 #  repair states

k=10 # 10 # feedback strength constant #

gammaz=100 # d
cz=100 # number of neurotransmitters per vesicle
z=0 # neurotransmitters

delta_t = 0.001
tmax = 500 # <-------------- TMAX, set to 200 for the FF calculation

keq=5

nfflist=[]
zfflist=[]

niters=20
for i in range(niters):
    
    print(i, niters)
    
    Rinf=simulate_kr_inf(f, pr, M, n, r, z, 1/(1/keq-1/np.inf), 
                         gammaz, cz, ftype, tmax, delta_t)
    ninf=Rinf[1]
    nff=get_FF(ninf)
    nfflist.append(nff)
    
    zinf=Rinf[3]
    zff=get_FF(zinf)
    zfflist.append(zff)

nffinf=np.mean(nfflist)
zffinf=np.mean(zfflist)

nmeanlist=[]
zmeanlist=[]
nfflist=[]
zfflist=[]

krlist=np.linspace(keq+0.01,1000,100)
for i, kr in enumerate(krlist):
    print(i, len(krlist))
    R = simulate(f, pr, M, n, r, z, 1/(1/keq-1/kr), kr, 
                gammaz, cz, 'u', tmax, delta_t)
    nlist=R[1]
    zlist=R[3]
    nmean=np.mean(nlist) # means
    zmean=np.mean(zlist)
    nff = get_FF(nlist) # FFs
    zff = get_FF(zlist)
    nmeanlist.append(nmean) # append means
    zmeanlist.append(zmean)
    nfflist.append(nff) # append FFs
    zfflist.append(zff)
nffkr=np.mean(nfflist)
zffkr=np.mean(zfflist)

nffeq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))
print(nffeq, nffinf)
#%%
plt.plot(krlist, np.array(nfflist)/nffinf, label='n')
plt.plot(krlist, np.array(zfflist)/zffinf, label='z')
plt.legend()
plt.show()
#%%
###############################################################################
#
#                               Plot
#
###############################################################################

# =============================================================================
# fig, ax = plt.subplots(3,1)
# =============================================================================



# How much do these curves deviate when I'm using deterministic repair times
# and increasing the value of kr?

def get_ff_sim():
    ratio = 0.2
    keq=5
    # 1/keq = 1/k + 1/kr
    # k = 1/(1/keq - 1/kr)
    krinf = np.inf
    kinf = 1/(1/keq-1/krinf)
    tlist, n_inf_list, r_inf_list, z_inf_list, APlist = \
        simulate_kr_inf(f, pr, M, n, r, z, kinf, k1, kb, krinf, 
                        gammaz, cz, ftype, tmax, delta_t)
    
    n_inf_ss = n_inf_list[int(ratio*len(n_inf_list)):]
    z_inf_ss = z_inf_list[int(ratio*len(z_inf_list)):]
    
    ff_n_sim=get_FF(n_inf_ss)
    ff_z_sim=get_FF(z_inf_ss)
    
    return ff_n_sim

keq=5
ntests=20
R=[]
for i in range(ntests):
    print(i, ntests)
    R.append(get_ff_sim())

FFmean = np.mean(R)
RCI = np.sqrt(np.var(R))/np.sqrt(ntests)

ff_n_eq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))
print(FFmean, ff_n_eq)
#%%

nruns=5
krlist = np.linspace(keq+0.01,1000,100)
nomean = np.zeros((nruns, len(krlist)))
zmean = np.zeros((nruns, len(krlist)))

for i in range(nruns):
    print(i, nruns)
    for j in range(len(krlist)):
        print(j, len(krlist))
        result_j = simulate(f,pr, M, nu, no, nr, z, 1/(1/keq - 1/krlist[j]), 
                       k1, kb, krlist[j], gammaz,
                       cz, ftype, tmax)
            
        nomean[i,j]=get_FF(result_j[2])
        zmean[i,j]=get_FF(result_j[4])

    
fo = np.mean(nomean, 0) / ff_no_sim
fz = np.mean(zmean, 0) / ff_z_sim

fs2=15
plt.title('f={}, pr={}, k={}, kr={}, gammaz={}, cz={}, fb={}'.format(
    f, pr, k, kr,gammaz,cz, ftype))
plt.plot(krlist, fo, label='no')
plt.plot(krlist, fz, label='z')
plt.xlabel('Repair rate, kr', fontsize = fs2)
plt.ylabel('Fano factor', fontsize = fs2)
plt.tick_params(axis='both', labelsize = fs2)
plt.legend(fontsize = fs2-2)
plt.show()

#%%
# =============================================================================
# fu=[]
# fo=[]
# fr=[]
# 
# for j in range(20):
#     print(j)
#     k1list = np.linspace(0, 20, 100)
# 
#     results = [simulate(f,pr, M, nu, no, nr, z, k, k1, kb, kr, gammaz,
#         cz, ftype, tmax, AP=True, deterministic=False, zmean=zmean, zth=zth) 
#                for i in range(len(k1list))]
# 
#     #results[i][j], ith value of k1, jth return value of simulate where 0 is tlist, 1 is nuhist.
#     ffu = [get_FF(results[i][1]) for i in range(len(results))]
#     ffo = [get_FF(results[i][2]) for i in range(len(results))]
#     ffr = [get_FF(results[i][3]) for i in range(len(results))]
# 
#     fu.append(ffu)
#     fo.append(ffo)
#     fr.append(ffr)
# 
# fumean=np.mean(fu,0)
# fomean=np.mean(fo,0)
# frmean=np.mean(fr,0)
# 
# fs2=15
# plt.title('f={}, pr={}, k={}, kr={}, gammaz={}, cz={}, fb={}'.format(
#     f, pr, k, kr,gammaz,cz, ftype))
# plt.plot(k1list, fumean, label='unoccupied')
# plt.plot(k1list, fomean, label='occupied')
# plt.plot(k1list, frmean, label='repair')
# plt.xlabel('Feedback strength, k1', fontsize = fs2)
# plt.ylabel('Fano factor', fontsize = fs2)
# plt.tick_params(axis='both', labelsize = fs2)
# plt.legend(fontsize = fs2-2)
# plt.show()
# =============================================================================
