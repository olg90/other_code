import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from collections import deque
# =============================================================================
#      no -> no + 1   with rate   K*(M-n-r), where K is: (-): k/(1+k1 z)
#                                             (+):kb+(k-kb)( k1 z / (1+ k1 z))
# 
#      n -> n - b   with rate   f
#      r -> r + b
#      z -> z + cb
# 
#      r -> r - 1   with rate   kr * r
# 
#      z -> z - 1     with rate   gammaz*z
# ============================================================================= 

def get_FF(x):
    return np.var(x)/np.mean(x)

def kreg(z, k, k1, kb, ftype):
    if ftype=='n':
        return k/(1+k1*z)
    if ftype=='p':
        return kb+(k-kb)*(k1*z/(1+k1*z))
    if ftype=='u':
        return k

def simulate(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax, delta_t):

        nlist=[]
        zlist=[]
        rlist=[]

        tlist=[]
        APlist=[]

        tcurr=0
        
        ratio = 0.3

# =============================================================================
#         delta_t = 0.01 # longer than the typical autocorrelation time of the system
#         # longer than the typical duration of the shortest reaction
# =============================================================================
        timer = delta_t
        
        while tcurr < tmax:

            t0=exponential(1/f) # action potential
            t1=exponential(1/(kreg(z, k, k1, kb, ftype)*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3=exponential(1/(kr*r + 1e-6)) # repair a site
            t4 = timer
            if t0 < t1 and t0 < t2 and t0 < t3 and t0 < t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin

            elif t1<t0 and t1<t2 and t1<t3 and t1 < t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
            elif t2<t0 and t2<t1 and t2<t3 and t2 < t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-1
                tmin = t3
                timer -= tmin
            else:
                timer = delta_t
                tmin=timer
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            
            tcurr += tmin
        #      0         1      2    3       4            5               6            7 8
        return tlist, nlist, rlist, zlist, APlist, np.mean(nlist), np.mean(zlist),\
            np.var(nlist)/np.mean(nlist), np.var(zlist)/np.mean(zlist)

def simulate_kr_inf(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax, delta_t):
        nlist=[]
        rlist=[]
        zlist=[]
        tlist=[]        
        APlist=[]

        tcurr=0
# =============================================================================
#         delta_t = 0.1 # longer than the typical autocorrelation time of the system
#         # longer than the typical duration of the shortest reaction
# =============================================================================
        timer = delta_t
        ratio=0.2

        while tcurr < tmax:
            
            # Get the three event times
            t0=exponential(1/f) # action potential
            t1=exponential(1/(kreg(z, k, k1, kb, ftype)*(M-n) + 1e-6)) # empty to occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove 1 neurotransmitter
            t3 = timer

            # Choose the smallest one and then make that event happen
            if t0 < t1 and t0 < t2 and t0 < t3: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                z = z + cz*b
                APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                
            elif t1<t0 and t1<t2 and t1<t3: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin

            elif t2<t0 and t2<t1 and t2<t3: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
                
            else:
                tmin=timer
                timer = delta_t
                if tcurr>= ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
                
            tcurr+=tmin
            
        #      0         1      2    3       4            5               6            7 8
        return tlist, nlist, rlist, zlist, APlist, np.mean(nlist), np.mean(zlist),\
            np.var(nlist)/np.mean(nlist), np.var(zlist)/np.mean(zlist)
    

def simulate_deterministic(f, pr, M, n, r, z, k, kr, gammaz, cz, ftype, tmax, delta_t):

        nlist=[]
        zlist=[]
        rlist=[]

        tlist=[]
        APlist=[]

        tcurr=0

        timer = delta_t
        kr_timer = 1/kr

        ratio = 0.3

        while tcurr < tmax:

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3 = kr_timer
            t4 = timer

            if t0<t1 and t0<t2 and t0<t3 and t0<t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                kr_timer-=tmin

            elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
                kr_timer-=tmin

            elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
                kr_timer-=tmin
                
            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-1
                tmin = t3
                timer -= tmin
                kr_timer=1/kr

            else:
                tmin=timer
                kr_timer-=tmin
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)

            tcurr += tmin

        #      0         1      2    3       4            5               6            7 8
        return tlist, nlist, rlist, zlist, APlist, np.mean(nlist), np.mean(zlist),\
            np.var(nlist)/np.mean(nlist), np.var(zlist)/np.mean(zlist)
    
def simulate_deterministic2(f, pr, M, n, r, z, k, kr, gammaz, cz, ftype, tmax, delta_t):

        nlist=[n]
        zlist=[z]
        rlist=[r]

        tlist=[0]
        APlist=[]

        tcurr=0

        timer = delta_t
        kr_timer = 1/kr

        ratio = 0.3

        blist = []
        krtimerslist=[]
        
        while tcurr < tmax:
            
# =============================================================================
#             print(tcurr, krtimerslist)
# =============================================================================

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            if len(krtimerslist)>0:
                t3 = krtimerslist[0]-tcurr
            else:
                t3=np.inf
            t4 = timer

            if t0<t1 and t0<t2 and t0<t3 and t0<t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                if b>0:
                    blist.append(b)
                    krtimerslist.append(tcurr+tmin+kr_timer)
                    
            elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
                
            elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin

            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-blist.pop(0)
                    krtimerslist.pop(0)
                tmin = t3
                timer -= tmin
                
            else:
                tmin=timer
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            
            tcurr += tmin

        return tlist, nlist, rlist, zlist, APlist, np.mean(nlist), np.mean(zlist),\
            np.var(nlist)/np.mean(nlist), np.var(zlist)/np.mean(zlist)
            
def simulate_gamma(f, pr, M, n, r, z, k, kr, gammaz, cz, ftype, tmax, delta_t):

        nlist=[n]
        zlist=[z]
        rlist=[r]

        tlist=[0]
        APlist=[]

        tcurr=0

        timer = delta_t
        kr_timer = 1/kr

        ratio = 0.3
        blist = deque()
        krtimerslist = deque()

        while tcurr < tmax:

# =============================================================================
#             print(tcurr, krtimerslist)
# =============================================================================

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3=gamma(1/CV**2, CV**2/kr)
            if len(krtimerslist)>0:
                t3 = krtimerslist[0]-tcurr
            else:
                t3=np.inf
            t4 = timer

            if t0<t1 and t0<t2 and t0<t3 and t0<t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                if b>0:
                    blist.append(b)
                    krtimerslist.append(tcurr+tmin+kr_timer)
                    
            elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin

            elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin

            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-blist.popleft()
                    krtimerslist.popleft()
                tmin = t3
                timer -= tmin

            else:
                tmin=timer
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            
            tcurr += tmin

        return tlist, nlist, rlist, zlist, APlist
#%% Test 1 : Feedback tests


ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
kr=10 # 10,  repair rate, 15 for good plot, rate of nr->nu
gammaz=100
cz=50 # number of neurotransmitters per vesicle

kn=178 # ----------- HERE
k1n=3 # 10 up to 15

kp=25 # 
kb=7 # 1 base rate
k1p=0.001 # 10  # negative feedback strength, (-) speed of k-> 0, (+) speed of kb->k

n=M # occupied states
r=0 # repair states
z=0 # neurotransmitters

delta_t = 0.001
tmax = 100 # <-------------- TMAX, set to 200 for the FF calculation

q=[]
qq=[]
means=[]
zmean=[]

zmeaneq=f*cz*pr*k*M/(gammaz*(f*pr+k))
print(zmeaneq)

x=np.linspace(0,1000,1000)
pt(x, kreg(x, k=kp, k1=k1p, kb=kb, ftype='p'))
plt.axvline(x=zmeaneq)

ntimes=20
for i in range(ntimes):
    print(i, ntimes)
    R0s = simulate_kr_inf(f, pr, M, n, r, z, k, 0, 0, kr, gammaz, cz, 'u', tmax, delta_t)
    z0FF=get_FF(R0s[1]) # 1 n, 3 z
    m0=np.mean(R0s[1])
    z0=np.mean(R0s[3])
    q0=get_FF(R0s[3])

    Rns = simulate_kr_inf(f, pr, M, n, r, z, kn, k1n, kb, kr, gammaz, cz, 'n', tmax, delta_t)
    znFF=get_FF(Rns[1]) # 1 n, 3 z
    mn=np.mean(Rns[1])
    zn=np.mean(Rns[3])
    qn = get_FF(Rns[3])

    Rps = simulate_kr_inf(f, pr, M, n, r, z, kp, k1p, kb, kr, gammaz, cz, 'p', tmax, delta_t)
    zpFF=get_FF(Rps[1]) # 1 n, 3 
    mp=np.mean(Rps[1])
    zp=np.mean(Rps[3])
    qp = get_FF(Rps[3])

    q.append([z0FF, znFF, zpFF])
    qq.append([q0, qn, qp])
    means.append([m0, mn, mp])
    zmean.append([z0, zn, zp])
    print('n', np.mean(means, 0))
    print('z', np.mean(zmean, 0))
    print('FFz', np.mean(qq, 0))
    print('FFz', np.mean(q, 0))

q=np.array(q)
ffs = np.mean(q, 0)

zmeaneq=f*cz*pr*k*M/(gammaz*(f*pr+k))
means=np.array(means)
means=np.mean(means, 0)
zmeans = np.array(zmean)
zmeans = np.mean(zmeans, 0)

# =============================================================================
# print(zmeaneq, zmeans)
# =============================================================================

# =============================================================================
# print(zmeaneq, np.mean(q,0))
# print('kn kp k1n, k1p kb')
# print(kn, kp, k1n, k1p, kb)
# =============================================================================
#%% Test 2:  Vertical plot with four plots

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
gammaz=100
cz=100 # number of neurotransmitters per vesicle

n=M # occupied states
r=0 #  repair states
z=0 # neurotransmitters

k1=0
kn=0 # ----------- HERE
k1n=0
kp=0
k1p=0 # 10  # negative feedback strength, (-) speed of k-> 0, (+) speed of kb->k
kb=0 #1 base rate

delta_t = 0.001
tmax = 10 # <-------------- TMAX, set to 200 for the FF calculation

tlist, nlist, rlist, zlist, APlist = simulate(f, pr, M, n, r, z, k, k1, kb, 
                                              kr, gammaz, cz, 'u', tmax, delta_t)
ulist = M-np.array(nlist)-np.array(rlist)

#
font_path = 'C:/Windows/Fonts/BOOKOS.TTF'  # Adjust the path according to your system

# Add the font to Matplotlib's font manager
import matplotlib.font_manager as fm
fm.fontManager.addfont(font_path)
bookman_prop = fm.FontProperties(fname=font_path)
plt.rcParams['font.family'] = bookman_prop.get_name()
plt.rcParams['font.size'] = 20  # Set font size to 15

fig, ax = plt.subplots(4, 1, figsize = (9,7))  # Adjust figure size if needed

tinit=1 # 37, 39, 49
t0=tinit*int(1/delta_t)
t1=t0+int(1/delta_t)

ax[0].step(tlist[t0:t1], nlist[t0:t1], color='#ff7f0e', where='post', linewidth=3)
ax[0].set_xticks([])
d=10
ax[0].set_ylim([-d, np.max(nlist)+d])

ax[1].step(tlist[t0:t1], ulist[t0:t1], color='#1f77b4', where='post', linewidth=3)
ax[1].set_xticks([])

ax[2].step(tlist[t0:t1], rlist[t0:t1], color='red', where='post', linewidth=3)
ax[2].set_xticks([])

ax[3].step(np.linspace(0,1, t1-t0), zlist[t0:t1], color='green', where='post', linewidth=3)
ax[3].set_xlabel('Time (sec)')

plt.show()

#%% Test 3 : keq, checking the means

# Test 3 : keq, checking the means

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
gammaz=100 # d
cz=100 # number of neurotransmitters per vesicle
keq=5

n=M # occupied states
r=0 #  repair states
z=0 # neurotransmitters

delta_t = 0.001
tmax = 100 # <-------------- TMAX, set to 200 for the FF calculation

nfflist=[]
zfflist=[]

niters=20
for i in range(niters):

    print(i, niters)

    Rinf=simulate_kr_inf(f, pr, M, n, r, z, 1/(1/keq-1/np.inf), 
                    0, 0, 0, gammaz, cz, ftype, tmax, delta_t)

    ninf=Rinf[1]
    nff=get_FF(ninf)
    nfflist.append(nff)

    zinf=Rinf[3]
    zff=get_FF(zinf)
    zfflist.append(zff)

nffinf=np.mean(nfflist)
zffinf=np.mean(zfflist)

krlist = np.linspace(keq+0.01, 1000, 20)

def function(ttype, krlist):

    nruns=10

    nFF = []
    zFF= []
    nmeans = []
    zmeans = []
    for i, kr in enumerate(krlist):
        nmeanlist=[]
        zmeanlist=[]
        nfflist=[]
        zfflist=[]
        for j in range(nruns):
            print(i, len(krlist), j, nruns)
            if ttype==0:
                R = simulate(f, pr, M, n, r, z, 1/(1/keq-1/kr), 0, 0, 
                             kr, gammaz, cz, 'u', tmax, delta_t)

            if ttype==1:
                R = simulate_deterministic2(f, pr, M, n, r, z, 1/(1/keq-1/kr),
                                           kr, gammaz, cz, ftype, tmax, delta_t)
            nmeanlist.append(R[5]) # append means
            zmeanlist.append(R[6])
            nfflist.append(R[7]) # append FFs
            zfflist.append(R[8])
        nFF.append(np.mean(nfflist))
        zFF.append(np.mean(zfflist))
        nmeans.append(np.mean(nmeanlist))
        zmeans.append(np.mean(zmeanlist))

    nmeans = np.array(nmeans)
    zmeans = np.array(zmeans)
    nFF = np.array(nFF)
    zFF = np.array(zFF)

    return nmeans, zmeans, nFF, zFF

nmeans, zmeans, nFF, zFF = function(0, krlist)
dnmeans, dzmeans, dnFF, dzFF = function(1, krlist)

nffeq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))

# The means are equal
# =============================================================================
# plt.plot(krlist, nmeans, label='n')
# plt.plot(krlist, dnmeans, label='dn')
# plt.plot(krlist, zmeans, label='z')
# plt.plot(krlist, dzmeans ,label='dz')
# plt.legend()
# plt.show()
# =============================================================================

# =============================================================================
# plt.plot(krlist, np.array(nFF)/nffinf, label='FFn/FFn_inf', marker='o', markersize=5)
# plt.plot(krlist, np.array(zFF)/zffinf, label='FFz/FFz_inf', marker='o',markersize=5)
# 
# plt.ylabel('Normalized fano factor')
# plt.xlabel('Repair rate')
# plt.legend()
# plt.show()
# =============================================================================

# =============================================================================
# plt.plot(krlist, dnFF/nffinf, label='FFn/FFn_inf', marker='o', markersize=5)
# plt.plot(krlist, dzFF/zffinf, label='FFz/FFz_inf', marker='o',markersize=5)
# 
# plt.ylabel('Normalized fano factor')
# plt.xlabel('Repair rate')
# plt.legend()
# plt.show()
# =============================================================================
#%% Test 4 : Plotting the nFF, zFF

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
gammaz=100 # d
cz=100 # number of neurotransmitters per vesicle
keq=5

n=M # occupied states
r=0 #  repair states
z=0 # neurotransmitters

delta_t = 0.001
tmax = 500 # <-------------- TMAX, set to 200 for the FF calculation

nfflist=[]
zfflist=[]

niters=20
for i in range(niters):

    print(i, niters)

    Rinf=simulate_kr_inf(f, pr, M, n, r, z, 1/(1/keq-1/np.inf), 
                    0, 0, 0, gammaz, cz, ftype, tmax, delta_t)

    ninf=Rinf[1]
    nff=get_FF(ninf)
    nfflist.append(nff)

    zinf=Rinf[3]
    zff=get_FF(zinf)
    zfflist.append(zff)

nffinf=np.mean(nfflist)
zffinf=np.mean(zfflist)

krlist = np.linspace(keq+0.01, 200, 20)

def function(ttype, krlist):

    nruns=10

    nFF = []
    zFF= []
    nmeans = []
    zmeans = []
    for i, kr in enumerate(krlist):
        nmeanlist=[]
        zmeanlist=[]
        nfflist=[]
        zfflist=[]
        for j in range(nruns):
            print(i, len(krlist), j, nruns)
            if ttype==0:
                R = simulate(f, pr, M, n, r, z, 1/(1/keq-1/kr), 0, 0, 
                             kr, gammaz, cz, 'u', tmax, delta_t)

            if ttype==1:
                R = simulate_deterministic2(f, pr, M, n, r, z, 1/(1/keq-1/kr),
                                           kr, gammaz, cz, ftype, tmax, delta_t)
            nmeanlist.append(R[5]) # append means
            zmeanlist.append(R[6])
            nfflist.append(R[7]) # append FFs
            zfflist.append(R[8])
        nFF.append(np.mean(nfflist))
        zFF.append(np.mean(zfflist))
        nmeans.append(np.mean(nmeanlist))
        zmeans.append(np.mean(zmeanlist))

    nmeans = np.array(nmeans)
    zmeans = np.array(zmeans)
    nFF = np.array(nFF)
    zFF = np.array(zFF)

    return nmeans, zmeans, nFF, zFF

# =============================================================================
# nmeans, zmeans, nFF, zFF = function(0, krlist)
# =============================================================================
dnmeans, dzmeans, dnFF, dzFF = function(1, krlist)

font_path = 'C:/Windows/Fonts/BOOKOS.TTF'
import matplotlib.font_manager as fm
fm.fontManager.addfont(font_path)
bookman_prop = fm.FontProperties(fname=font_path)
plt.rcParams['font.family'] = bookman_prop.get_name()
plt.rcParams['font.size'] = 15  # Set font size to 15

plt.plot(krlist, dnFF/nffinf, label='FFn/FFn_inf', marker='o', markersize=5)
plt.plot(krlist, dzFF/zffinf, label='FFz/FFz_inf', marker='o',markersize=5)
fs=15
plt.ylabel('Normalized fano factor')
plt.xlabel('Repair rate')
plt.legend()
plt.xscale('log')

plt.show()

# =============================================================================
# nffeq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))
# =============================================================================
#%% Test 5 : 2x3 plot feedback

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
gammaz=100
cz=50 # number of neurotransmitters per vesicle

kn=178 # ----------- HERE
k1n=3 # 10 up to 15

kp=25 # 
kb=7 # 1 base rate
k1p=0.001 # 10  # negative feedback strength, (-) speed of k-> 0, (+) speed of kb->k

n=M # occupied states
r=0 # repair states
z=0 # neurotransmitters

delta_t = 0.001
tmax = 100 # <-------------- TMAX, set to 200 for the FF calculation

tinit=33 # 37, 39, 49
t0=tinit*int(1/delta_t)
t1=t0+int(1/delta_t)

tinit1=27 # 37, 39, 49
t01=tinit1*int(1/delta_t)
t11=t01+int(1/delta_t)

tinit0=55 # 37, 39, 49
t00=tinit0*int(1/delta_t)
t10=t00+int(1/delta_t)

# =============================================================================
# R0t = simulate_kr_inf(f, pr, M, n, r, z, k, 0, 0, 0, gammaz, cz, 'u', tmax, delta_t)
# Rnt = simulate_kr_inf(f, pr, M, n, r, z, kn, k1n, kb, 0, gammaz, cz, 'n', tmax, delta_t)
# Rpt = simulate_kr_inf(f, pr, M, n, r, z, kp, k1p, kb, 0, gammaz, cz, 'p', tmax, delta_t)
# 
# =============================================================================
#
font_path = 'C:/Windows/Fonts/BOOKOS.TTF'  # Adjust the path according to your system

# Add the font to Matplotlib's font manager
import matplotlib.font_manager as fm
fm.fontManager.addfont(font_path)
bookman_prop = fm.FontProperties(fname=font_path)
plt.rcParams['font.family'] = bookman_prop.get_name()
#

ffs = [6.351, 15, 5.439]

fs = 15  # font size
fig, ax = plt.subplots(2,3, figsize=(18,4))

ap0=R0t[4][t0:10]
ap1=Rnt[4][t0:10]
ap2=Rpt[4][t0:10]

cs=['#1f77b4', '#ff7f0e']

ax[0,0].step(R0t[0][t01:t11], R0t[1][t01:t11], where='post',
           label='noff = {}'.format(np.around(ffs[0],3)), linewidth=3,
           color=cs[0])
ax[0,1].step(Rnt[0][t0:t1], Rnt[1][t0:t1], where='post',
           label='noff = {}'.format(np.around(ffs[1],3)), linewidth=3, 
           color=cs[0])
ax[0,2].step(Rpt[0][t00:t10], Rpt[1][t00:t10], where='post',
           label='noff = {}'.format(np.around(ffs[2],3)), linewidth=3, 
           color=cs[0])

d=10
ax[0,0].set_ylim([-d, 100+d])
ax[0,1].set_ylim([-d, 100+d])
ax[0,2].set_ylim([-d, 100+d])

ax[0,0].set_xticks([])
ax[0,1].set_xticks([])
ax[0,2].set_xticks([])
ax[0,1].set_yticks([])
ax[0,2].set_yticks([])
ax[1,1].set_yticks([]) 
ax[1,2].set_yticks([]) 

fs2=15
ax[0,0].tick_params(axis='y', labelsize=fs2)
ax[1,0].tick_params(axis='both', labelsize=fs2)
ax[1,1].tick_params(axis='x', labelsize=fs2)
ax[1,2].tick_params(axis='x', labelsize=fs2)

# =============================================================================
# ax[0,0].
# ax[0,1].
# ax[0,2].
# ax[1,0]. 
# ax[1,1].
# ax[1,2].
# =============================================================================

tplot = np.linspace(0,1,t1-t0)

d=200

ax[1,0].step(tplot, R0t[3][t01:t11], color=cs[1], where='post', linewidth=3)
ax[1,1].step(tplot, Rnt[3][t0:t1], color=cs[1], where='post', linewidth=3)
ax[1,2].step(tplot, Rpt[3][t00:t10], color=cs[1], where='post', linewidth=3)

mval=np.max([R0t[3][t0:t1], Rnt[3][t0:t1], Rpt[3][t0:t1]])

ax[1,1].set_ylim([-d, mval+d])
ax[1,2].set_ylim([-d, mval+d])

ax[1,1].set_xlabel('Time, (sec)', fontsize = 20)

ax[0,0].set_title('No feedback', fontsize=20)
ax[0,1].set_title('Negative feedback', fontsize=20)
ax[0,2].set_title('Positive feedback', fontsize=20)

fig.tight_layout(rect=[0, 0, 1, 1])

plt.show()
#%% Test 6 : Gamma distributed

gamma(1/CV**2, CV**2/kr)
