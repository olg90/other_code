import numpy as np
import matplotlib.pyplot as plt

def run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax):

    AP_times = [[] for i in range(nnum)]
    vhists=[[] for i in range(nnum)]
    nhists=[[] for i in range(nnum)]
    thists = [[] for i in range(nnum)]
    
    ratio=0.3
    tcurr = 0
    vs = np.zeros(nnum)
    ns = np.zeros(nnum)
    timer = delta_t
    while tcurr < tmax:
        print(tcurr/tmax)
        t0=np.random.exponential(1/f)
        t1s=[np.random.exponential(1/(k*(M-ns[i])+1e-10)) for i in range(nnum)]
        t2=timer
        tlist=[t0] + t1s + [t2]
        tmin=np.min(tlist)
        targmin=np.argmin(tlist)
        
        if targmin == 0:
            
            b=np.random.binomial(ns[0], pr) # Number released
            ns[0]-=b
            vs[0]+=c*b
            timer -= tmin
            
        elif ((targmin > 0) and (targmin < len(tlist)-1)):
            ns[targmin-1]+=1
            timer-=tmin

        else:
            tmin=t2
            if tcurr>ratio*tmax:
                for i in range(nnum):
                    vhists[i].append(vs[i])
                    nhists[i].append(ns[i])
                    thists[i].append(tcurr)
            timer = delta_t
        tcurr += tmin
        for i in range(len(vs)):
            vs[i] = vs[i]*np.exp(-tmin/tauv)
        for i in range(len(vs)):
            if vs[i] >= vth:
                vs[i] = 0
                AP_times[i].append(tcurr)
                if i != nnum-1:
                    b=np.random.binomial(ns[i+1], pr) # Number released
                    ns[i+1]-=b
                    vs[i+1]+=c*b
                    
    Tmeans=[np.mean(np.diff(AP_times[i])) for i in range(nnum)]
    CVT2s=[np.var(np.diff(AP_times[i]))/np.mean(np.diff(AP_times[i]))**2 for i in range(nnum)]
        
                
    return thists, nhists, vhists, AP_times, Tmeans, CVT2s
                
# =============================================================================
#     vhist = np.array(vhist) # data array
#     AP_times = np.array(AP_times)
#     inter_AP_times = np.diff(AP_times)
#     if len(inter_AP_times) < 2:
#         mean_inter_AP_time = np.nan
#         CVT2 = np.nan
#     else:
#         mean_inter_AP_time = np.mean(inter_AP_times)
#         CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
#     return {'vhist': vhist,
#             'thist':np.array(thist),
#             'AP_times':np.array(AP_times),
#             'inter_AP_times':np.array(inter_AP_times),
#             'mean_T':mean_inter_AP_time, 
#             'CVT2':CVT2}
# =============================================================================

###############################################################################
#
#                               Main Code
#
###############################################################################

f = 100
M = 100
pr = 0.2
c = 0.01
k = 10
tauv = 0.5
vth = 0.2

nnum=20
tmax = 500

delta_t = 0.001
# -----------------------------------------------------------------------------


res = run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax)
plt.plot(range(1, nnum+1), 1*np.ones(nnum), color='k')
plt.plot(range(1,nnum+1), res[4]/res[4][0], label='<T>', marker='o')
plt.plot(range(1, nnum+1), res[5]/res[5][0], label='CVT2', marker='o')
plt.xlim([0.5, nnum+1])
plt.plot([], [], ' ', label='f={}, M={}, pr={}, c={} '.format(f, M, pr, c))
plt.plot([], [], ' ', label='k={}, tauv={}, vth={}'.format(k, tauv, vth))

plt.xlabel('Neuron number in sequence')
plt.ylabel('CVT^2 and <T>\nnormalized by the first neuron')
plt.legend()
#%%
prlist = np.linspace(0.01,0.3,5)
CV2list=[]
for pr in prlist:
    print(pr)
    res = run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax)
    CV2list.append(res[5])
for i,x in enumerate(CV2list):
    plt.plot(range(1, nnum+1),x, label = 'pr={}'.format(prlist[i]), marker='o')
plt.legend()



# =============================================================================
# res = run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax)
# fig, ax = plt.subplots(nnum,1)
# for i in range(nnum):
#     ax[i].set_ylabel('potential\nneuron #{}'.format(i+1))
#     ax[i].plot(res[0][i], res[2][i], label='T={}, CVT={}'.format(np.around(res[4][i],3), np.around(res[5][i],3)))
#     ax[i].plot(res[0][i], vth*np.ones(len(res[2][0])))
#     if i != nnum-1:
#         ax[i].set_xticks([])
#     if i == nnum-1:
#         ax[i].set_xlabel('time (sec)')
#     ax[i].legend(loc='upper right')
# plt.show()
# 
# =============================================================================
