import numpy as np
import matplotlib.pyplot as plt

def run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax):

    vhist=[]
    thist=[]
    AP_times = [[] for i in range(nnum)]
    vhists=[[] for i in range(nnum)]
    nhists=[[] for i in range(nnum)]
    thists = [[] for i in range(nnum)]
    
    tcurr = 0
    vs = np.zeros(nnum)
    ns = np.zeros(nnum)
    timer = delta_t
    while tcurr < tmax:
        t0=np.random.exponential(1/f)
        t1s=[np.random.exponential(1/(k*(M-ns[i])+1e-10)) for i in range(nnum)]
        t2=timer
        tlist=[t0] + t1s + [t2]
        tmin=np.min(tlist)
        targmin=np.argmin(tlist)
        
        if targmin == 0:
            
            b=np.random.binomial(ns[0], pr) # Number released
            ns[0]-=b
            vs[0]+=c*b
            timer -= tmin
            
        elif ((targmin > 0) and (targmin < len(tlist)-1)):
            ns[targmin-1]+=1
            timer-=tmin
            
        else:
            tmin=t2
            for i in range(nnum):
                vhists[i].append(vs[i])
                nhists[i].append(ns[i])
                thists[i].append(tcurr)
            timer = delta_t
        tcurr += tmin
        for i in range(len(vs)):
            vs[i] = vs[i]*np.exp(-tmin/tauv)
            if vs[i] >= vth:
                vs[i] = 0
                AP_times[i].append(tcurr)
                
# =============================================================================
#                 b=np.random.binomial(ns[0], pr) # Number released
#                 ns[0]-=b
#                 vs[0]+=c*b
# =============================================================================
                
    return thists, nhists, vhists, AP_times
                
# =============================================================================
#     vhist = np.array(vhist) # data array
#     AP_times = np.array(AP_times)
#     inter_AP_times = np.diff(AP_times)
#     if len(inter_AP_times) < 2:
#         mean_inter_AP_time = np.nan
#         CVT2 = np.nan
#     else:
#         mean_inter_AP_time = np.mean(inter_AP_times)
#         CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
#     return {'vhist': vhist,
#             'thist':np.array(thist),
#             'AP_times':np.array(AP_times),
#             'inter_AP_times':np.array(inter_AP_times),
#             'mean_T':mean_inter_AP_time, 
#             'CVT2':CVT2}
# =============================================================================

###############################################################################
#
#                               Main Code
#
###############################################################################


f=100
M = 100
pr = 0.2
c = 0.001
k = 10
tauv = 5
vth = 0.2

nnum=2
tmax = 10

delta_t = 0.01

res = run_test(f, k, M, pr, c, vth, tauv, nnum, delta_t, tmax)

for i in range(nnum):
    plt.plot(res[2][i], label='{}'.format(i))
plt.legend()
plt.show()
