import numpy as np
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial

def run_test(f, k, M, pr, c, vth, tauv, delta_t, tmax):

    vhist=[]
    thist=[]
    AP_times = []
    
    tcurr = 0
    v = 0
    n = 0
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f)
        t1=exponential(1/(k*(M-n)+1e-10))
        t2=timer
        
        if t0<t1 and t0<t2:
            b=np.random.binomial(n, pr) # Number released
            n-=b
            v+=c*b
            tmin=t0
            timer -= tmin
        elif t1<t0 and t1<t2:
            if n<M:
                n+=1      
            tmin=t1
            timer-=tmin
            
        else:
            tmin=t2
            
            vhist.append(v)
            thist.append(tcurr)
            timer = delta_t
        tcurr += tmin
        v = v*np.exp(-tmin/tauv)
        if v >= vth:
            v = 0
            AP_times.append(tcurr)
    vhist = np.array(vhist) # data array
    AP_times = np.array(AP_times)
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    return {'vhist': vhist,
            'thist':np.array(thist),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2}


def simulate(vth, f, pr, M, k, tauv, tmax, delta_t, navgs):

    tavgs=[]
    cavgs=[]
    bavgs=[]

    for _ in range(navgs):

        nlist=[]
        vlist=[]
        tlist=[]
        prelist=[]
        postlist=[]
        blist=[]
        
        n=0
        v=0

        tcurr=0
        ratio = 0.3
        timer = delta_t
        while tcurr < tmax:
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n) + 1e-6)) # site gets occupied
            t2 = timer

            if t0 < t1 and t0 < t2: # AP occurrs
                b = binomial(n, pr)
                blist.append(b)
                n-=b
                v=v+c*b
                tmin = t0
                timer-=tmin
                prelist.append(tcurr+tmin)

            elif t1<t0 and t1<t2: # add a docked vesicle
                n+=1
                tmin = t1
                timer-=tmin

            else:
                tmin=t2
                timer = delta_t
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    vlist.append(v)
                    tlist.append(tcurr)

            tcurr += tmin
            if v>=vth:
                postlist.append(tcurr)
                v=0

            # Update the continuous dynamics

            v = v + (-v/tauv) * tmin


        Tlist = np.diff(postlist)
        Tmean = np.mean(Tlist)
        CVT2=np.var(Tlist)/Tmean**2
        FFn=np.var(nlist)/np.mean(nlist)
        FFv=np.var(vlist)/np.mean(vlist)
        
        tavgs.append(Tmean)
        cavgs.append(CVT2)
        bavgs.append(np.mean(blist))
    Tmean = np.mean(tavgs)
    CVT2 = np.mean(cavgs)
    
    bavgs = np.mean(bavgs)
    
    return tlist, nlist, vlist, prelist, postlist, Tmean, CVT2, FFn, FFv, bavgs

###############################################################################
#
#                               Main Code
#
###############################################################################

tmax = 1
f=100
M = 100
pr = 0.2
c = 0.01
k = 10
tauv = 0.1
vth = 0.2

delta_t = 0.001
navgs=1

res=simulate(vth, f, pr, M, k, tauv, tmax, delta_t, navgs)
plt.plot(res[0], res[2])
