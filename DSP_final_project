% load data
clear all;
close all;
clc;

dp = load('poulami_ecg.mat');
do = load('oliver_ecg.mat');
dp = dp.PC; % Extract from cell
do = do.olg;
%%

% add noise to data

% std = 0.1;
% stdo = std;
% stdp = std;

stdo = 0.01;
stdp = 0.1;
no = normrnd(0,stdo,[length(do),1]);
np = normrnd(0,stdp,[length(dp),1]);
dpn = dp + np;
don = do + no;

% de-noise the data with FIR filter design
low_cutoff = 0.5/(0.5*1000);
high_cutoff = 50/(0.5*1000); 
filter_order = 100;
band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');
ddp = filter(band_pass_filter, 1, dpn);
ddo = filter(band_pass_filter, 1, don);

% plotting information
nmax = 68; % This is the maximum number of seconds plottable
nsec = 10; % SET THIS TO SOMETHING UP TO NMAX
Fs = 1000; % Increments of 1000 since sample rate is 1000 samples / second, FIXED.

% plotting setup
prange = Fs*nsec; % Plotting range
trange = linspace(0, nsec, prange); % Time range for plotting
onplot = don(1:prange);
pnplot = dpn(1:prange);
oplot = do(1:prange);
pplot = dp(1:prange);

% Plot data
subplot(2,2,1)
plot(trange, onplot , 'r-')
title(sprintf('Oliver ECG, noise STD = %.2f', stdo));
ylabel('Signal')
xlabel('Time, (Seconds)')
xlim([0, nsec])
subplot(2,2,3)
plot(trange, pnplot , 'b-')
ylabel('Signal')
title(sprintf('Poulami ECG, noise STD = %.2f', stdp));
xlabel('Time, (Seconds)')
xlim([0, nsec])

% take the fft's
Nfft = 2^10; % 1024 = 2^10
ffto = fft(onplot, Nfft);
fftp = fft(pnplot, Nfft);
mago = abs(ffto);
magp = abs(fftp);
logo = 20*log10(mago);
logp = 20*log10(magp);

% subplot(2,2,2)
% frequencies = linspace(0, 0.5, length(mago)/2);
% plot(frequencies, ddo)
% title('Oliver magnitude spectrum')
% ylabel('Magnitude')
% xlabel('Frequency, f')
% 
% xlim([0, 0.5])
% 
% subplot(2,2,4)
% plot(frequencies, logp(1:length(magp)/2))
% title('Poulami magnitude spectrum')
% ylabel('Magnitude')
% xlabel('Frequency, f')
% xlim([0, 0.5])

subplot(2,2,2)
plot(ddo(1:prange))
title('Oliver FIR')
ylabel('Magnitude')
xlabel('Frequency, f')

subplot(2,2,4)
plot(ddp(1:prange))
title('Poulami FIR')
ylabel('Magnitude')
xlabel('Frequency, f')


%%
% Plot data
subplot(2,2,1)
plot(trange, oplot , 'r-')
title(sprintf('Oliver ECG'));
xlim([0, nsec])
xticks([])

subplot(2,2,3)
plot(trange, pplot , 'b-')
ylabel('Signal amplitude', 'Position', [-2 ,1.5], 'FontWeight', 'bold')
title(sprintf('Poulami ECG'));
xlabel('Time, (s)', 'Position', [11.5,-0.7], 'FontWeight', 'bold')
xlim([0, nsec])

subplot(2,2,2)
plot(trange, onplot , 'r-')
title(sprintf('noise STD = %.2f', stdo));
xlim([0, nsec])
xticks([])
yticks([])

subplot(2,2,4)
plot(trange, pnplot , 'b-')
title(sprintf('noise STD = %.2f', stdp));
yticks([])

xlim([0, nsec])

%%

std = 0.01;
[ofir, pfir] = denoise_algorithm(do, dp, std, Fs, 'fir');
[oma, pma] = denoise_algorithm(do, dp, std, Fs, 'ma');
[omed, pmed] = denoise_algorithm(do, dp, std, Fs, 'median');
[okal, pkal] = denoise_algorithm(do, dp, std, Fs, 'kalman');


subplot(5,2,1)
plot(ofir)
subplot(5,2,2)
plot(pfir)
subplot(5,2,3)
subplot(5,2,4)
subplot(5,2,5)
subplot(5,2,6)
subplot(5,2,7)
subplot(5,2,8)
subplot(5,2,9)
subplot(5,2,10)
%%



% IDEA: Maybe increase STDEV and plot correctly-identified-peaks vs STDEV.
% Maybe try different types of noise line linear noise or additional
% sinusoidal noise that could be present because of medical equipment being
% picked up nearby by the machinery.  Maybe add multiple kinds of noise and
% combinations and see how the algorithm fairs.  Maybe see under what
% conditions and under what types of noise the algorithm still works.
% Maybe for fast sinusoidal noise the frequency of the noise will have an
% effect on how accurately the algorithm will work.  Maybe see under what
% conditions the noise fails as in what types of noise will this be
% ineffective to detect the R peaks.

%%

% de-noise the data with a highpass FIR filter
low_cutoff = 0.5/(0.5*1000);
high_cutoff = 50/(0.5*1000); 
filter_order = 100;
band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');

[peakso, loco] = findpeaks(do, 'MinPeakHeight', 0.6*max(do), 'MinPeakDistance', 0.6*Fs);
[peaksp, locp] = findpeaks(dp, 'MinPeakHeight', 0.6*max(dp), 'MinPeakDistance', 0.6*Fs);

stdmin = 0; % min = 0            
stdmax = 2;
nstds = 1000;

tolerance = 0.25;
toleranceo = tolerance;
tolerancep = tolerance;

stdarray = linspace(stdmin, stdmax, nstds);

ocorsfir = [];
ocorsmedian = [];
ocorsbutterworth = [];
ocorskalman = [];
ocorswav = [];

pcorsfir = [];
pcorsmedian = [];
pcorsbutterworth = [];
pcorskalman = [];
pcorswav = [];


nsums = 10;
%%%%%%%%%%%

% % Wavelet
% for i = 1:nsums
%     disp(i)
%     [ocormatw, pcormatw] = get_corrects_wav(do, dp, peakso, loco, peaksp, locp, stdarray, toleranceo, tolerancep, Fs);
%     ocorsw = [ocorsw; ocormatw];
%     pcorsw = [pcorsw; pcormatw];
% end

% FIR
for i = 1:nsums
    disp(i)
    [ocormatfir, pcormatfir] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, ...
    stdarray, toleranceo, tolerancep, Fs, 'FIR');
    ocorsfir = [ocorsfir; ocormatfir];
    pcorsfir = [pcorsfir; pcormatfir];
    
    [ocormatmedian, pcormatmedian] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, ...
    stdarray, toleranceo, tolerancep, Fs, 'median');
    ocorsmedian = [ocorsmedian; ocormatmedian];
    pcorsmedian = [pcorsmedian; pcormatmedian];

    [ocormatbutterworth, pcormatbutterworth] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, ...
    stdarray, toleranceo, tolerancep, Fs, 'butterworth');
    ocorsbutterworth = [ocorsbutterworth; ocormatbutterworth];
    pcorsbutterworth = [pcorsbutterworth; pcormatbutterworth];
    
    [ocormatkalman, pcormatkalman] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, ...
    stdarray, toleranceo, tolerancep, Fs, 'kalman');
    ocorskalman = [ocorskalman; ocormatkalman];
    pcorskalman = [pcorskalman; pcormatkalman];

    [ocormatwav, pcormatwav] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, ...
    stdarray, toleranceo, tolerancep, Fs, 'kalman');
    ocorswav = [ocorswav; ocormatwav];
    pcorswav = [pcorswav; pcormatwav];

end

ocormatavgfir = mean(ocorsfir, 1);
pcormatavgfir = mean(pcorsfir, 1);

ocormatavgmedian = mean(ocorsmedian, 1);
pcormatavgmedian = mean(pcorsmedian, 1);

ocormatavgbutterworth = mean(ocorsbutterworth, 1);
pcormatavgbutterworth = mean(pcorsbutterworth, 1);

ocormatavgkalman = mean(ocorskalman, 1);
pcormatavgkalman = mean(pcorskalman, 1);

ocormatavgw = mean(ocorswav, 1);
pcormatavgw = mean(pcorswav, 1);

subplot(1,2,1)
plot(stdarray, ocormatavgfir, 'DisplayName', 'FIR')
hold on
plot(stdarray, ocormatavgmedian, 'DisplayName', 'Median')
plot(stdarray, ocormatavgbutterworth, 'DisplayName', 'Butterworth')
plot(stdarray, ocormatavgkalman, 'DisplayName', 'Kalman')
plot(stdarray, ocormatavgwav, 'DisplayName', 'Wavelet')
legend()
xlabel('Noise, (std)')
ylabel('% peaks correctly identified')
title('Oliver ECG, FIR')

subplot(1,2,2)
plot(stdarray, pcormatavgfir, 'DisplayName', 'FIR')
hold on
plot(stdarray, pcormatavgmedian, 'DisplayName', 'Median')
plot(stdarray, pcormatavgbutterworth, 'DisplayName', 'Butterworth')
plot(stdarray, pcormatavgkalman, 'DisplayName', 'Kalman')
plot(stdarray, pcormatavgwav, 'DisplayName', 'Wavelet')
legend()
xlabel('Noise, (std)')
ylabel('% peaks correctly identified')
title('Poulami ECG, FIR')

%%
std = 0.3;
[ofir, pfir] = denoise_algorithm(do, dp, std, Fs, 'fir');
[oma, pma] = denoise_algorithm(do, dp, std, Fs, 'ma');
[omed, pmed] = denoise_algorithm(do, dp, std, Fs, 'median');
[okal, pkal] = denoise_algorithm(do, dp, std, Fs, 'kalman');

[owav, pwav] = denoise_algorithm(do, dp, std, Fs, 'wavelet');

ofir = ofir(1:10*Fs);
pfir = pfir(1:10*Fs);
oma = oma(1:10*Fs);
pma = pma(1:10*Fs);
omed = omed(1:10*Fs);
pmed = pmed(1:10*Fs);
okal = okal(1:10*Fs);
pkal = pkal(1:10*Fs);

owav = owav(1:10*Fs);
pwav = pwav(1:10*Fs);



sgtitle(sprintf('STD = %.2f', std), 'FontWeight', 'bold')

subplot(5,2,1)
plot(ofir)
ylabel('FIR')
title('Oliver denoised')
subplot(5,2,2)
plot(pfir)
title('Poulami denoised')
subplot(5,2,3)
plot(oma)
ylabel('moving average')
subplot(5,2,4)
plot(pma)
subplot(5,2,5)
plot(omed)
ylabel('median')
subplot(5,2,6)
plot(pmed)
subplot(5,2,7)
plot(okal)
ylabel('kalman')
subplot(5,2,8)
plot(pkal)
subplot(5,2,9)
plot(owav)
ylabel('wavelet')
subplot(5,2,10)
plot(pwav)
%

function [ocormat, pcormat] = get_corrects_wav(do, dp, peakso, loco, peaksp, locp, stdarray, toleranceo, tolerancep, Fs)
    ocormat = [];
    pcormat = [];
    for std = stdarray
        no = normrnd(0,std,[length(do),1]);
        np = normrnd(0,std,[length(dp),1]);
        dpn = dp + np;
        don = do + no;
               
        ddpdir = wavelet_denoise(don); % ------------ CHANGE IS HERE
        ddodir = wavelet_denoise(dpn); % ------------ CHANGE IS HERE
       
        [peaksor, locor] = findpeaks(ddodir, 'MinPeakHeight', 0.6*max(ddodir), 'MinPeakDistance', 0.6*Fs);
        [peakspr, locpr] = findpeaks(ddpdir, 'MinPeakHeight', 0.6*max(ddpdir), 'MinPeakDistance', 0.6*Fs);

        correcto = get_correct(peaksor, locor, loco, peakso, Fs, toleranceo);
        correctp = get_correct(peakspr, locpr, locp, peaksp, Fs, tolerancep);

        percoroi = correcto / length(loco);
        percorpi = correctp / length(locp);

        ocormat = [ocormat, percoroi];
        pcormat = [pcormat, percorpi];

    end
end

function outputs = get_correct(peaksor, locor, loco, peakso, Fs, toleranceo)

    correcto = 0;
   
    for i = 1:length(peaksor)
        po = peaksor(i);
        lo = locor(i);
        dfo = abs(lo - loco);
        
        [disto, indo] = min(dfo);
        
        clo = loco(indo);
        
        clpo = peakso(indo);
        
        normo = sqrt((clpo - po)^2 + ((lo - clo)/Fs)^2);
        
        if normo < toleranceo
            correcto = correcto + 1;
        end
    end
    
    outputs = correcto;
end

function ecgDenoised = wavelet_denoise(data_noisy)
    waveletType = 'db4';
    maxLevel = 30;
    [coefficients, levels] = wavedec(data_noisy, maxLevel, waveletType);
    sigma = median(abs(coefficients - median(coefficients))) / 0.6745;
    threshold = sqrt(2 * log(length(data_noisy))) * sigma;
    coefficientsDenoised = wthresh(coefficients, 's', threshold);
    ecgDenoised = waverec(coefficientsDenoised, levels, waveletType);
end

% Assuming you have the ECG signal in the variable 'ecg_signal'

function [ocormat, pcormat] = get_corrects_combined(do, dp, peakso, loco, peaksp, locp, stdarray, toleranceo, tolerancep, Fs, filter_type)
    ocormat = [];
    pcormat = [];
    
    for std = stdarray

        [ddodir, ddpdir] = denoise_algorithm(do, dp, std, Fs, filter_type);

        [peaksor, locor] = findpeaks(ddodir, 'MinPeakHeight', 0.6 * max(ddodir), 'MinPeakDistance', 0.6 * Fs);
        [peakspr, locpr] = findpeaks(ddpdir, 'MinPeakHeight', 0.6 * max(ddpdir), 'MinPeakDistance', 0.6 * Fs);
        
        correcto = get_correct(peaksor, locor, loco, peakso, Fs, toleranceo);
        correctp = get_correct(peakspr, locpr, locp, peaksp, Fs, tolerancep);

        percoroi = correcto / length(loco);
        percorpi = correctp / length(locp);

        ocormat = [ocormat, percoroi];
        pcormat = [pcormat, percorpi];
    end
end

function [ddodir, ddpdir] = denoise_algorithm(do, dp, std, Fs, filter_type)
        no = normrnd(0, std, [length(do), 1]);
        np = normrnd(0, std, [length(dp), 1]);
        don = do + no;
        dpn = dp + np;
        switch lower(filter_type)
            case 'fir'
                % FIR Bandpass Filter
                low_cutoff = 0.5 / (0.5 * Fs);
                high_cutoff = 50 / (0.5 * Fs);
                filter_order = 100;
                band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');
                
                ddpdir = filter(band_pass_filter, 1, dpn);
                ddodir = filter(band_pass_filter, 1, don);

            case 'ma'
                % Moving Average Filter
                window_size_ma = 50;
                ddodir = movmean(don, window_size_ma);
                ddpdir = movmean(dpn, window_size_ma);

            case 'median'
                % Median Filter
                window_size_median = 25;
                ddodir = medfilt1(don, window_size_median);
                ddpdir = medfilt1(dpn, window_size_median);

            case 'butterworth'
                % Butterworth Filter
                order_butter = 4;
                cutoff_frequency = 50;
                [b, a] = butter(order_butter, cutoff_frequency / (Fs / 2), 'low');
                ddodir = filtfilt(b, a, don);
                ddpdir = filtfilt(b, a, dpn);

            case 'kalman'
                % Kalman Filter for don
                Q = 0.01;
                R = 0.1;
                x_hat = don(1);
                P = 1;
                kalman_filtered_signal_don = zeros(size(don));

                for k = 2:length(don)
                    % Prediction
                    x_hat_minus = x_hat;
                    P_minus = P + Q;

                    % Update
                    K = P_minus / (P_minus + R);
                    x_hat = x_hat_minus + K * (don(k) - x_hat_minus);
                    P = (1 - K) * P_minus;

                    kalman_filtered_signal_don(k) = x_hat;
                end

                % Kalman Filter for dpn
                x_hat = dpn(1);
                P = 1;
                kalman_filtered_signal_dpn = zeros(size(dpn));

                for k = 2:length(dpn)
                    % Prediction
                    x_hat_minus = x_hat;
                    P_minus = P + Q;

                    % Update
                    K = P_minus / (P_minus + R);
                    x_hat = x_hat_minus + K * (dpn(k) - x_hat_minus);
                    P = (1 - K) * P_minus;

                    kalman_filtered_signal_dpn(k) = x_hat;
                end

                ddodir = kalman_filtered_signal_don;
                ddpdir = kalman_filtered_signal_dpn;

            case 'wavelet'
                waveletType = 'db4';
                maxLevel = 30;
                [coefficients, levels] = wavedec(don, maxLevel, waveletType);
                sigma = median(abs(coefficients - median(coefficients))) / 0.6745;
                threshold = sqrt(2 * log(length(don))) * sigma;
                coefficientsDenoised = wthresh(coefficients, 's', threshold);

                ddodir = waverec(coefficientsDenoised, levels, waveletType);

                [coefficients, levels] = wavedec(dpn, maxLevel, waveletType);
                sigma = median(abs(coefficients - median(coefficients))) / 0.6745;
                threshold = sqrt(2 * log(length(dpn))) * sigma;
                coefficientsDenoised = wthresh(coefficients, 's', threshold);

                ddpdir = waverec(coefficientsDenoised, levels, waveletType);


            otherwise
                error('Invalid filter type. Use ''FIR'', ''MA'', ''Median'', ''Butterworth'', or ''Kalman''.');
        end
        
end
