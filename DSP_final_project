% load data
clear all;
close all;
clc;

dp = load('poulami_ecg.mat');
do = load('oliver_ecg.mat');
dp = dp.PC; % Extract from cell
do = do.olg;
%%

% add noise to data

% std = 0.1;
% stdo = std;
% stdp = std;

stdo = 0.01;
stdp = 10000;
no = normrnd(0,stdo,[length(do),1]);
np = normrnd(0,stdp,[length(dp),1]);
dpn = dp + np;
don = do + no;

% de-noise the data with FIR filter design
low_cutoff = 0.5/(0.5*1000);
high_cutoff = 50/(0.5*1000); 
filter_order = 100;
band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');
ddp = filter(band_pass_filter, 1, dpn);
ddo = filter(band_pass_filter, 1, don);

% plotting information
nmax = 68; % This is the maximum number of seconds plottable
nsec = 10; % SET THIS TO SOMETHING UP TO NMAX
Fs = 1000; % Increments of 1000 since sample rate is 1000 samples / second, FIXED.

% plotting setup
prange = Fs*nsec; % Plotting range
trange = linspace(0, nsec, prange); % Time range for plotting
onplot = don(1:prange);
pnplot = dpn(1:prange);

% Plot data
subplot(2,2,1)
plot(trange, onplot , 'r-')
title(sprintf('Oliver ECG, noise STD = %.2f', stdo));
ylabel('Signal')
xlabel('Time, (Seconds)')
xlim([0, nsec])
subplot(2,2,3)
plot(trange, pnplot , 'b-')
ylabel('Signal')
title(sprintf('Poulami ECG, noise STD = %.2f', stdp));
xlabel('Time, (Seconds)')
xlim([0, nsec])

% take the fft's
Nfft = 2^10; % 1024 = 2^10
ffto = fft(onplot, Nfft);
fftp = fft(pnplot, Nfft);
mago = abs(ffto);
magp = abs(fftp);
logo = 20*log10(mago);
logp = 20*log10(magp);

% subplot(2,2,2)
% frequencies = linspace(0, 0.5, length(mago)/2);
% plot(frequencies, ddo)
% title('Oliver magnitude spectrum')
% ylabel('Magnitude')
% xlabel('Frequency, f')
% 
% xlim([0, 0.5])
% 
% subplot(2,2,4)
% plot(frequencies, logp(1:length(magp)/2))
% title('Poulami magnitude spectrum')
% ylabel('Magnitude')
% xlabel('Frequency, f')
% xlim([0, 0.5])

subplot(2,2,2)
plot(ddo(1:prange))
title('Oliver FIR')
ylabel('Magnitude')
xlabel('Frequency, f')

subplot(2,2,4)
plot(ddp(1:prange))
title('Poulami FIR')
ylabel('Magnitude')
xlabel('Frequency, f')


% IDEA: Maybe increase STDEV and plot correctly-identified-peaks vs STDEV.
% Maybe try different types of noise line linear noise or additional
% sinusoidal noise that could be present because of medical equipment being
% picked up nearby by the machinery.  Maybe add multiple kinds of noise and
% combinations and see how the algorithm fairs.  Maybe see under what
% conditions and under what types of noise the algorithm still works.
% Maybe for fast sinusoidal noise the frequency of the noise will have an
% effect on how accurately the algorithm will work.  Maybe see under what
% conditions the noise fails as in what types of noise will this be
% ineffective to detect the R peaks.

%%

% de-noise the data with a highpass FIR filter
low_cutoff = 0.5/(0.5*1000);
high_cutoff = 50/(0.5*1000); 
filter_order = 100;
band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');

[peakso, loco] = findpeaks(do, 'MinPeakHeight', 0.6*max(do), 'MinPeakDistance', 0.6*Fs);
[peaksp, locp] = findpeaks(dp, 'MinPeakHeight', 0.6*max(dp), 'MinPeakDistance', 0.6*Fs);

stdmin = 0; % min = 0            
stdmax = 2;
nstds = 1000;

tolerance = 0.25;
toleranceo = tolerance;
tolerancep = tolerance;

stdarray = linspace(stdmin, stdmax, nstds);

ocorsdir = [];
pcorsdir = [];
ocorswav = [];
pcorswav = [];

nsums = 10;
for i = 1:nsums
    disp(i)
    [ocormatdir, pcormatdir,ocormatwav, pcormatwav] = get_corrects(do, dp, peakso, loco, peaksp, locp, stdarray, toleranceo, tolerancep, Fs);
    ocorsdir = [ocorsdir; ocormatdir];
    pcorsdir = [pcorsdir; pcormatdir];
    ocorswav = [ocorswav; ocormatwav];
    pcorswav = [pcorswav; pcormatwav];
end

ocormatavgdir = mean(ocorsdir, 1);
pcormatavgdir = mean(pcorsdir, 1);
ocormatavgwav = mean(ocorswav, 1);
pcormatavgwav = mean(pcorswav, 1);

subplot(1,2,1)
plot(stdarray, ocormatavgdir, 'r')
hold on
plot(stdarray, ocormatavgwav, 'b')
xlabel('Noise, (std)')
ylabel('% peaks correctly identified')
title('Oliver ECG, FIR')

subplot(1,2,2)
plot(stdarray, pcormatavgdir, 'r')
hold on
plot(stdarray, pcormatavgwav, 'b')
xlabel('Noise, (std)')
ylabel('% peaks correctly identified')
title('Poulami ECG, FIR')

function [ocormatdir, pcormatdir, ocormatwav, pcormatwav] = get_corrects(do, dp, peakso, loco, peaksp, locp, stdarray, toleranceo, tolerancep, Fs)
    ocormatdir = [];
    pcormatdir = [];
    ocormatwav = [];
    pcormatwav = [];
    for std = stdarray
        no = normrnd(0,std,[length(do),1]);
        np = normrnd(0,std,[length(dp),1]);
        dpn = dp + np;
        don = do + no;
        
        low_cutoff = 0.5/(0.5*1000);
        high_cutoff = 50/(0.5*1000); 
        filter_order = 100;
        band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');
        
        ddpdir = filter(band_pass_filter, 1, dpn);
        ddodir = filter(band_pass_filter, 1, don);
        
        ddowav = wavelet_denoise(don);
        ddpwav = wavelet_denoise(dpn);

        [peaksordir, locordir] = findpeaks(ddodir, 'MinPeakHeight', 0.6*max(ddodir), 'MinPeakDistance', 0.6*Fs);
        [peaksprdir, locprdir] = findpeaks(ddpdir, 'MinPeakHeight', 0.6*max(ddpdir), 'MinPeakDistance', 0.6*Fs);
        [peaksorwav, locorwav] = findpeaks(ddowav, 'MinPeakHeight', 0.6*max(ddowav), 'MinPeakDistance', 0.6*Fs);
        [peaksprwav, locprwav] = findpeaks(ddpwav, 'MinPeakHeight', 0.6*max(ddpwav), 'MinPeakDistance', 0.6*Fs);

        correctodir = get_correct(peaksordir, locordir, loco, peakso, Fs, toleranceo);
        correctpdir = get_correct(peaksprdir, locprdir, locp, peaksp, Fs, tolerancep);
        correctowav = get_correct(peaksorwav, locorwav, loco, peakso, Fs, toleranceo);
        correctpwav = get_correct(peaksprwav, locprwav, locp, peaksp, Fs, tolerancep);

        percoroidir = correctodir / length(loco);
        percorpidir = correctpdir / length(locp);
        percoroiwav = correctowav / length(loco);
        percorpiwav = correctpwav / length(locp);

        ocormatdir = [ocormatdir, percoroidir];
        pcormatdir = [pcormatdir, percorpidir];
        ocormatwav = [ocormatwav, percoroidir];
        pcormatwav = [pcormatwav, percorpidir];

    end
end

function outputs = get_correct(peaksor, locor, loco, peakso, Fs, toleranceo)

    correcto = 0;
    
    % o
    for i = 1:length(peaksor)
        po = peaksor(i);
        lo = locor(i);
        
        dfo = abs(lo - loco);
        
        [disto, indo] = min(dfo);
        
        clo = loco(indo);
        
        clpo = peakso(indo);
        
        normo = sqrt((clpo - po)^2 + ((lo - clo)/Fs)^2);
        
        if normo < toleranceo
            correcto = correcto + 1;
        end
    end
    
    outputs = correcto;
end

function ecgDenoised = wavelet_denoise(data_noisy)
    waveletType = 'db4';
    maxLevel = 30;
    [coefficients, levels] = wavedec(data_noisy, maxLevel, waveletType);
    sigma = median(abs(coefficients - median(coefficients))) / 0.6745;
    threshold = sqrt(2 * log(length(data_noisy))) * sigma;
    coefficientsDenoised = wthresh(coefficients, 's', threshold);
    ecgDenoised = waverec(coefficientsDenoised, levels, waveletType);
end
