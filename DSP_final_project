% load data
clear all;
close all;
clc;

dp = load('poulami_ecg.mat');
do = load('oliver_ecg.mat');
do = do.olg;
dp = dp.PC; % Extract from cell
dp = dp(1:length(do)); % Make Poulami's data the same length as Oliver's data

plot(do)
hold on
plot(dp)


%%

% add noise to data

% std = 0.1;
% stdo = std;
% stdp = std;

stdo = 0.3;
stdp = 0.5;
no = normrnd(0,stdo,[length(do),1]);
np = normrnd(0,stdp,[length(dp),1]);
dpn = dp + np;
don = do + no;

% plotting information
nmax = 68; % This is the maximum number of seconds plottable
nsec = 10; % SET THIS TO SOMETHING UP TO NMAX
Fs = 1000; % Increments of 1000 since sample rate is 1000 samples / second, FIXED.

% plotting setup
prange = Fs*nsec; % Plotting range
trange = linspace(0, nsec, prange); % Time range for plotting
onplot = don(1:prange);
pnplot = dpn(1:prange);
oplot = do(1:prange);
pplot = dp(1:prange);



subplot(2,3,1)
plot(trange, do(1:prange))
title('ECG Oliver')
ylabel('Magnitude')
xlabel('time, (s)')

subplot(2,3,2)
plot(trange, don(1:prange))
title(sprintf('STD = %.2f', stdo))
ylabel('Magnitude')
xlabel('time, (s)')

subplot(2,3,4)
plot(trange, dp(1:prange), 'r')
title('ECG Poulami')
ylabel('Magnitude')
xlabel('time, (s)')

subplot(2,3,5)
plot(trange, dpn(1:prange), 'r')
title(sprintf('STD = %.2f', stdp))
ylabel('Magnitude')
xlabel('time, (s)')


dodplot = denoise_algorithm(don, std, Fs, 'ma');
dpdplot = denoise_algorithm(dpn, std, Fs, 'ma');

subplot(2,3,3)
plot(trange, dodplot(1:prange))
title('Denoised ECG Oliver')
xlabel('time, (s)')

subplot(2,3,6)
plot(trange, dpdplot(1:prange), 'r')
title('Denoised ECG Poulami')
xlabel('time, (s)')


%%

% Plot data

subplot(2,2,1)
plot(trange, oplot , 'r-')
title(sprintf('Oliver ECG'));
xlim([0, nsec])
xticks([])

subplot(2,2,3)
plot(trange, pplot , 'b-')
ylabel('Signal amplitude', 'Position', [-2 ,1.5])
title(sprintf('Poulami ECG'));
xlabel('time, (sec)', 'Position', [11.5,-0.7])
xlim([0, nsec])

subplot(2,2,2)
plot(trange, onplot , 'r-')
title(sprintf('noise STD = %.2f', stdo));
xlim([0, nsec])
xticks([])
yticks([])

subplot(2,2,4)
plot(trange, pnplot , 'b-')
title(sprintf('noise STD = %.2f', stdp));
yticks([])

xlim([0, nsec])



%%

% POULAMI RUN THIS BLOCK YOU PANCAKE <---------------------------

[peakso, loco] = findpeaks(do, 'MinPeakHeight', 0.6*max(do), 'MinPeakDistance', 0.6*Fs);
[peaksp, locp] = findpeaks(dp, 'MinPeakHeight', 0.6*max(dp), 'MinPeakDistance', 0.6*Fs);

odf = diff(loco/1000);
pdf = diff(locp/1000);

periodo = 60/mean(odf);
periodp = 60/mean(pdf);

mpho = mean(peakso); % mean peak height oliver
mphp = mean(peaksp);

vpho = var(peakso);
vphp = var(peaksp);

cvo = sqrt(vpho)/mpho;
cvp = sqrt(vphp)/mphp;

stdmin = 0; % min = 0
stdmaxo = 2*mpho;
stdmaxp = 2*mphp;
nstds = 1000;

tolerance_percentage = 0.25; %0.25
toleranceo = tolerance_percentage*mpho;
tolerancep = tolerance_percentage*mphp;

stdarrayo = linspace(stdmin, stdmaxo, nstds);
stdarrayp = linspace(stdmin, stdmaxp, nstds);

ocorsfir = [];
ocorsmedian = [];
ocorsma = [];
ocorsbutterworth = [];
ocorswav = [];

pcorsfir = [];
pcorsmedian = [];
pcorsma = [];
pcorsbutterworth = [];
pcorswav = [];

nsums = 3;
%%%%%%%%%%%

% FIR
for i = 1:nsums
    disp(i)
    [ocormatfir, pcormatfir] = run_correct_test(do, dp, peakso, loco, peaksp, locp, ...
    stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, 'FIR');
    ocorsfir = [ocorsfir; ocormatfir];
    pcorsfir = [pcorsfir; pcormatfir];
    
    [ocormatma, pcormatma] = run_correct_test(do, dp, peakso, loco, peaksp, locp, ...
    stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, 'ma');
    ocorsma = [ocorsma; ocormatma];
    pcorsma = [pcorsma; pcormatma];
    
    [ocormatmedian, pcormatmedian] = run_correct_test(do, dp, peakso, loco, peaksp, locp, ...
    stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, 'median');
    ocorsmedian = [ocorsmedian; ocormatmedian];
    pcorsmedian = [pcorsmedian; pcormatmedian];

    [ocormatbutterworth, pcormatbutterworth] = run_correct_test(do, dp, peakso, loco, peaksp, locp, ...
    stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, 'butterworth');
    ocorsbutterworth = [ocorsbutterworth; ocormatbutterworth];
    pcorsbutterworth = [pcorsbutterworth; pcormatbutterworth];
    
    [ocormatwav, pcormatwav] = run_correct_test(do, dp, peakso, loco, peaksp, locp, ...
    stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, 'wavelet');
    ocorswav = [ocorswav; ocormatwav];
    pcorswav = [pcorswav; pcormatwav];
    
end

ocormatavgfir = mean(ocorsfir, 1);
pcormatavgfir = mean(pcorsfir, 1);

ocormatavgma = mean(ocorsma, 1);
pcormatavgma = mean(pcorsma, 1);

ocormatavgmedian = mean(ocorsmedian, 1);
pcormatavgmedian = mean(pcorsmedian, 1);

ocormatavgbutterworth = mean(ocorsbutterworth, 1);
pcormatavgbutterworth = mean(pcorsbutterworth, 1);

ocormatavgwav = mean(ocorsbutterworth, 1);
pcormatavgwav = mean(pcorsbutterworth, 1);

subplot(1,2,1)
plot(stdarrayo/mpho, ocormatavgfir, 'DisplayName', 'FIR')
hold on
plot(stdarrayo/mpho, ocormatavgmedian, 'DisplayName', 'Median')
plot(stdarrayo/mpho, ocormatavgma, 'DisplayName', 'Moving Avg.')
plot(stdarrayo/mpho, ocormatavgbutterworth, 'DisplayName', 'Butterworth')
plot(stdarrayo/mpho, ocormatavgwav, 'DisplayName', 'Wavelet')
legend()
xlabel('Noise normalized by mean peak height')
xlim([0,2])
ylabel('% peaks correctly identified')
title('Oliver ECG')

subplot(1,2,2)
plot(stdarrayp/mphp, pcormatavgfir, 'DisplayName', 'FIR')
hold on
plot(stdarrayp/mphp, pcormatavgmedian, 'DisplayName', 'Median')
plot(stdarrayp/mphp, pcormatavgma, 'DisplayName', 'Moving Avg.')
plot(stdarrayp/mphp, pcormatavgbutterworth, 'DisplayName', 'Butterworth')
plot(stdarrayp/mpho, opormatavgwav, 'DisplayName', 'Wavelet')
legend()
xlabel('Noise normalized by mean peak height')
ylabel('% peaks correctly identified')
title('Poulami ECG')
%%
otests = [ocormatavgfir; ocormatavgmedian; ocormatavgma; ocormatavgbutterworth];
ptests = [pcormatavgfir; pcormatavgmedian; pcormatavgma; pcormatavgbutterworth];

opdiff = otests - ptests;

meantestso = mean([ocormatavgfir; ocormatavgmedian; ocormatavgma; ocormatavgbutterworth], 1);
meantestsp = mean([pcormatavgfir; pcormatavgmedian; pcormatavgma; pcormatavgbutterworth], 1);

smootho = smooth(meantestso, 0.1, 'loess');
smoothp = smooth(meantestsp, 0.1, 'loess');

plot(stdarrayo/mpho,meantestso, 'DisplayName', 'Oliver', 'Color', [0,0,1])
hold on
plot(stdarrayp/mphp,meantestsp, 'DisplayName', 'Poulami', 'Color', [1,0,0])
xlabel('Percentage of mean peak height')
ylabel('Mean percentage correctly identified')
legend()

plot(meantestso - meantestsp)

plot(stdarrayo/mpho, smootho, 'DisplayName', 'Oliver');
hold on
plot(stdarrayp/mphp, smoothp, 'DisplayName', 'Poulami')
xlabel('Percentage of mean peak height')
ylabel('Mean percentage correctly identified')
legend()

plot(linspace(0,2, 1000), smootho-smoothp)

legend()
plot(opdiff(1, :))
hold on
plot(smooth(opdiff(1,:), 0.1, 'loess'));

sums = sum(opdiff, 2);

plot(do);
hold on
plot(dp);

%%
sws = 100;
mdiff = meantestso - meantestsp;
sdiff = sum(mdiff);
mus = movmean(mdiff, sws);
plot(linspace(0,2,1000), mdiff, 'Color', [0,0,1,0.2], 'DisplayName', 'Differences');
hold on
plot(linspace(0,2,1000), mus, 'Color' , [0,0,0], 'DisplayName', 'Mean trend');
legend(sprintf('Difference, Sum = %.2f', sdiff), 'Mean trend')
title("Difference of mean algorithm accuracy between Oliver and Poulami's data")
xlabel('Noise normalized by mean peak height')
ylabel("Difference between mean percentages correct")

%%
std = 0.2;
[ofir] = denoise_algorithm(do, std, Fs, 'fir');
[pfir] = denoise_algorithm(dp, std, Fs, 'fir');
[oma] = denoise_algorithm(do, std, Fs, 'ma');
[pma] = denoise_algorithm(dp, std, Fs, 'ma');
[omed] = denoise_algorithm(do, std, Fs, 'median');
[pmed] = denoise_algorithm( dp, std, Fs, 'median');
[obut] = denoise_algorithm(do, std, Fs, 'butterworth');
[pbut] = denoise_algorithm(dp, std, Fs, 'butterworth');


ofir = ofir(1:10*Fs);
pfir = pfir(1:10*Fs);
oma = oma(1:10*Fs);
pma = pma(1:10*Fs);
omed = omed(1:10*Fs);
pmed = pmed(1:10*Fs);
obut = obut(1:10*Fs);
pbut = pbut(1:10*Fs);


% sgtitle(sprintf('STD = %.2f', std), 'FontWeight', 'bold')
% fontsize = 12;
% 
% subplot(4,2,1)
% plot(trange, ofir)
% ylabel('FIR', 'FontWeight', 'bold', 'FontSize', fontsize)
% title('Denoised ECG data of Oliver', 'FontSize', fontsize)
% 
% subplot(4,2,2)
% plot(trange, pfir)
% title('Denoised ECG data of Poulami', 'FontSize', fontsize)
% 
% subplot(4,2,3)
% plot(trange, oma)
% ylabel('moving avg.', 'FontWeight', 'bold', 'FontSize', fontsize)
% 
% subplot(4,2,4)
% plot(trange, pma)
% 
% subplot(4,2,5)
% plot(trange, omed)
% ylabel('median', 'FontWeight', 'bold', 'FontSize', fontsize)
% 
% subplot(4,2,6)
% plot(trange, pmed)
% 
% subplot(4,2,7)
% plot(trange, obut)
% ylabel('butterworth', 'FontWeight', 'bold', 'FontSize', fontsize)
% 
% subplot(4,2,8)
% plot(trange, obut)




subplot(4,1,1)
plot(trange, ofir)
ylabel('FIR')
title('Denoised ECG data of Oliver, STD = 0.2')
subplot(4,1,2)
plot(trange, oma)
ylabel('moving avg.')
subplot(4,1,3)
plot(trange, omed)
ylabel('median')
subplot(4,1,4)
plot(trange, obut)
ylabel('butterworth')
xlabel('time, (sec)')

subplot(4,1,1)
plot(trange, pfir)
ylabel('FIR')
title('Denoised ECG data of Poulami, STD = 0.2')
subplot(4,1,2)
plot(trange, pma)
ylabel('moving avg.')
subplot(4,1,3)
plot(trange, pmed)
ylabel('median')
subplot(4,1,4)
plot(trange, obut)
ylabel('butterworth')
xlabel('time, (sec)')
%%
% Define filter specifications
order_butter = 2;
cutoff_frequency = 50;
Fs = 1000; % replace with your actual sampling frequency

% Design Butterworth filter
[b, a] = butter(order_butter, cutoff_frequency / (Fs / 2), 'low');

% Plot frequency response
freqz(b, a, 1024, Fs);

% Customize the plot
title('Butterworth Filter Frequency Response');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
grid on;
%%

% Define filter specifications
low_cutoff = 0.5 / (0.5 * Fs);
high_cutoff = 50 / (0.5 * Fs);
filter_order = 100;

% Design bandpass FIR filter
band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');

% Plot frequency response
freqz(band_pass_filter, 1, 1024, Fs);

% Customize the plot
title('Bandpass FIR Filter Frequency Response');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
grid on;


%%

function outputs = get_correct_peak_count(peaksor, locor, loco, peakso, Fs, toleranceo)

    correcto = 0;
    matched_indices = false(size(loco)); % Initialize a logical array to keep track of matched peaks
    
    for i = 1:length(peaksor)
        po = peaksor(i); % ith peak
        lo = locor(i); % locations
        dfo = abs(lo - loco); % differences
        
        % Exclude already matched peaks
        dfo(matched_indices) = inf;
        
        [disto, indo] = min(dfo);
        
        clo = loco(indo); % closest peak location
        
        clpo = peakso(indo); % closeset peak value
        
        normo = sqrt((clpo - po)^2 + ((lo - clo)/Fs)^2);
        
        if normo < toleranceo
            correcto = correcto + 1;
            matched_indices(indo) = true; % Mark the matched peak
        end
    end
    
    outputs = correcto;
end

function [ocormat, pcormat] = run_correct_test(do, dp, peakso, loco, peaksp, locp, stdarrayo, stdarrayp, toleranceo, tolerancep, Fs, filter_type)

    ocormat = [];
    pcormat = [];

    for std = stdarrayo
        
        [ddodir] = denoise_algorithm(do, std, Fs, filter_type);
        [peaksor, locor] = findpeaks(ddodir, 'MinPeakHeight', 0.5 * max(ddodir), 'MinPeakDistance', 0.6 * Fs);     
        correcto = get_correct_peak_count(peaksor, locor, loco, peakso, Fs, toleranceo);
        percoroi = correcto / length(loco);
        ocormat = [ocormat, percoroi];
    end

    for std = stdarrayp
        [ddpdir] = denoise_algorithm(dp, std, Fs, filter_type);
        [peakspr, locpr] = findpeaks(ddpdir, 'MinPeakHeight', 0.4 * max(ddpdir), 'MinPeakDistance', 0.6 * Fs);
        correctp = get_correct_peak_count(peakspr, locpr, locp, peaksp, Fs, tolerancep);
        percorpi = correctp / length(locp);
        pcormat = [pcormat, percorpi];
    end
    
end

function [ddodir] = denoise_algorithm(do, std, Fs, filter_type)
        no = normrnd(0, std, [length(do), 1]);
        don = do + no;
        switch lower(filter_type)
            case 'fir'
                % FIR Bandpass Filter
                low_cutoff = 0.5 / (0.5 * Fs);
                high_cutoff = 50 / (0.5 * Fs);
                filter_order = 100;
                band_pass_filter = fir1(filter_order, [low_cutoff, high_cutoff], 'bandpass');
                ddodir = filter(band_pass_filter, 1, don);

            case 'ma'
                % Moving Average Filter
                window_size_ma = 15; %50
                ddodir = movmean(don, window_size_ma);

            case 'median'
                % Median Filter
                window_size_median =20; %25
                ddodir = medfilt1(don, window_size_median);

            case 'butterworth'
                % Butterworth Filter
                order_butter = 2;
                cutoff_frequency = 50;
                [b, a] = butter(order_butter, cutoff_frequency / (Fs / 2), 'low');
                ddodir = filtfilt(b, a, don);
                
            case 'wavelet'

                %Choose the wavelet and set the maximum level of decomposition
                waveletType = 'db4';
                maxLevel = 5;
                % Perform multilevel wavelet decomposition
                [coefficients, levels] = wavedec(don, maxLevel, waveletType);
                % Estimate the noise standard deviation (using median absolute deviation)
                sigma = median(abs(coefficients - median(coefficients))) / 0.6745;
                % Choose the threshold based on the universal threshold formula
                threshold = sqrt(2 * log(length(don))) * sigma;
                % Apply soft thresholding
                coefficientsDenoised = wthresh(coefficients, 's', threshold);
                % Reconstruct the denoised signal
                ddodir = waverec(coefficientsDenoised, levels, waveletType);

            otherwise
                error('Invalid filter type. Use ''FIR'', ''MA'', ''Median'', ''Butterworth'', or ''Kalman''.');
        end
        
end
