import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from inspect import signature

class SignalPlotterApp:
    def __init__(self, root, functions):
        root.title("Signal Plotter")

        self.functions = functions

        # Initialize variables and sliders
        self.vars = {}
        self.sliders = []
        self.parameter_names = self.extract_parameters()

        # Store parameters in a dictionary
        self.parameters = {param: tk.DoubleVar(value=5) for param in self.parameter_names}
        self.x_min_var = tk.DoubleVar(value=0)
        self.x_max_var = tk.DoubleVar(value=100)
        self.y_min_var = tk.DoubleVar(value=0)
        self.y_max_var = tk.DoubleVar(value=100)
        self.x_var = tk.DoubleVar(value=self.x_max_var.get())
        self.y_var = tk.DoubleVar(value=self.y_max_var.get())
        self.parameters["x"] = self.x_var
        self.parameters["y"] = self.y_var

        for param_name, var in self.parameters.items():
            setattr(self, f"{param_name}_min_var", tk.DoubleVar(value=0))
            setattr(self, f"{param_name}_max_var", tk.DoubleVar(value=10))
            self.vars[param_name] = var

            # Dynamically set instance variables (e.g., self.A, self.B, etc.)
            setattr(self, param_name, var)

        # Create sliders for all parameters alphabetically
        self.create_sliders_for_all_functions(root)

        # Create update parameters button and signal plot
        self.create_update_params_button(root)
        self.create_signal_plot(root)

        # Create colormap dropdown
        self.create_colormap_dropdown(root)

        # Configure row and column to expand proportionally
        root.rowconfigure(0, weight=1)
        root.columnconfigure(1, weight=1)

        # Initialize the plot
        self.update_plot()

        # Bind Enter key to update_parameters method
        root.bind('<Return>', self.update_parameters)

    def extract_parameters(self):
        parameters = set()
        for func in self.functions:
            parameters.update(self.extract_function_parameters(func))
        parameters.add('x')  # Add 'x' to the set of parameters
        parameters.add('y')  # Add 'y' to the set of parameters
        return sorted(list(parameters))  # Sort parameters alphabetically

    def extract_function_parameters(self, func):
        sig = signature(func)
        parameters = [param_name for param_name, param in sig.parameters.items() if param_name not in ['x', 'y']]
        return parameters

    def create_sliders_for_all_functions(self, root):
        for param_name in self.parameter_names:
            var = self.parameters[param_name]
            min_var = getattr(self, f"{param_name}_min_var")
            max_var = getattr(self, f"{param_name}_max_var")

            slider = self.create_slider(root, param_name, var, min_var, max_var)
            self.sliders.append(slider)
            slider['frame'].grid(row=self.parameter_names.index(param_name), column=0, padx=10, pady=5, sticky=tk.W)

    def create_slider(self, root, label_text, slider_var, min_var, max_var):
        frame = ttk.Frame(root, padding=(5, 5, 5, 5))
        label = ttk.Label(frame, text=label_text)
        label.grid(row=0, column=0, sticky=tk.E, padx=5)
        xmin_entry = ttk.Entry(frame, textvariable=min_var, width=5)
        xmin_entry.grid(row=0, column=1, padx=5)
        slider = ttk.Scale(frame, from_=float(min_var.get()), to=float(max_var.get()), orient=tk.HORIZONTAL,
                           length=200, variable=slider_var, command=self.update_plot)
        slider.grid(row=0, column=2, padx=5)
        xmax_entry = ttk.Entry(frame, textvariable=max_var, width=5)
        xmax_entry.grid(row=0, column=3, padx=5)
        xmax_label = ttk.Label(frame, text=f"Value: {max_var.get():.2f}")
        xmax_label.grid(row=0, column=4, padx=5, sticky=tk.W)

        return {'frame': frame, 'slider': slider, 'xmax_label': xmax_label}

    def create_update_params_button(self, root):
        update_params_button = ttk.Button(root, text="Update Parameters", command=self.update_parameters)
        update_params_button.grid(row=len(self.parameter_names) + 1, column=0, pady=10)
    
    def create_signal_plot(self, root):
        self.fig, self.ax = plt.subplots(figsize=(6, 4))
        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.grid(row=0, column=1, rowspan=len(self.parameter_names) + 1, padx=10, pady=10, sticky=tk.W + tk.E + tk.N + tk.S)
    
        # Create colorbar to the right of the figure
        cax = self.fig.add_axes([0.92, 0.1, 0.02, 0.8])  # Adjust these values to position the colorbar
    
        # Dummy image for the ScalarMappable
        dummy_image = self.ax.imshow([[0, 0], [0, 0]], cmap='viridis', vmin=0, vmax=1)
        self.colorbar = self.fig.colorbar(mappable=dummy_image, cax=cax)
        self.colorbar.set_label('Colorbar Label')
        self.ax.clear()

    def create_colormap_dropdown(self, root):
        colormap_label = ttk.Label(root, text="Select Colormap:")
        colormap_label.grid(row=len(self.parameter_names) + 2, column=0, pady=5, padx=10, sticky=tk.W)
    
        self.colormap_var = tk.StringVar(value='viridis')  # Default colormap
        colormaps = plt.colormaps()
        colormap_dropdown = ttk.Combobox(root, textvariable=self.colormap_var, values=colormaps, state='readonly')
        colormap_dropdown.grid(row=len(self.parameter_names) + 2, column=1, pady=5, padx=10, sticky=tk.W)
        colormap_dropdown.bind("<<ComboboxSelected>>", self.update_plot)

    def update_parameters(self, event=None):
        for slider in self.sliders:
            min_var = slider['frame'].children['!entry']
            max_var = slider['frame'].children['!entry2']
            slider['slider'].configure(from_=float(min_var.get()), to=float(max_var.get()))

        # Call the update function after updating parameters
        self.update_plot()

    def update_plot(self, *args):
        x_min = self.x_min_var.get()
        x_max = self.x_var.get()
        y_min = self.y_min_var.get()
        y_max = self.y_var.get()

        n_steps = 1000
        x = np.linspace(x_min, x_max, n_steps)
        y = np.linspace(y_min, y_max, n_steps)
        x, y = np.meshgrid(x, y)

        # Access parameters directly using instance variables
        params = {param: var.get() for param, var in self.parameters.items()}

        self.ax.clear()
        legend_entries = []
        for func in self.functions:
            # Only pass parameters relevant to the current function
            func_params = {param: params[param] for param in self.extract_function_parameters(func)}
            z = func(x, y, **func_params)
            func_name = func.__name__  # Get the name of the function
            im = self.ax.imshow(z, extent=(x_min, x_max, y_min, y_max), origin='lower', aspect='auto', cmap=self.colormap_var.get())
            legend_entries.append(im)

        self.ax.set_xlabel('x')
        self.ax.set_ylabel('y')
        self.colorbar.update_normal(legend_entries[0])  # Update colorbar with the new data
        self.canvas.draw()

        # Update the slider labels with current values
        for slider in self.sliders:
            param_name = slider['frame'].children['!label'].cget("text")
            value = getattr(self, param_name).get()
            slider['xmax_label'].configure(text=f"Value: {value:.2f}")

# DEFINE YOUR FUNCTIONS HERE AND PUT THEM IN THE LIST CALLED FUNCTIONS
# YOUR INDEPENDENT VARIABLES MUST BE "x" and "y", and you can name all other variables any other name

def custom_function(x ,y, k1, p1, k2, p2, vth, c2, M2, c1, M1, tauv):
    f1 = x
    f2 = y
    numerator = k1 + f1 * p1
    denominator = k2 + f2 * p2

    term1 = numerator * denominator * vth
    term2 = -c2 * f2 * k2 * M2 * (k1 + f1 * p1) * p2
    term3 = c1 * f1 * k1 * M1 * p1 * (k2 + f2 * p2)

    inner_expression = term1 / (term2 + term3) * tauv
    tauv_expression = np.log(1 / (1 - inner_expression))

    return tauv_expression


functions_2d = [custom_function]  # FUNCTIONS LIST HERE

root = tk.Tk()
app = SignalPlotterApp(root, functions=functions_2d)
root.mainloop()
