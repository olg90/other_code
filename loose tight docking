import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp

def simulate(n, v, L, f, pr, M, kL, kd, ku, c, vth, tauv, tmax, delta_t):

    nlist=[]
    Llist=[]
    vlist=[]
    vthlist=[]
    tlist=[]
    prelist=[]
    postlist=[]
    e=1e-9

    tcurr=0
    ratio = 0
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f) # action potential
        t1=exponential(1/(kL*(M-n-L) + e)) # site gets occupied
        t2=exponential(1/(kd*L+e))
        t3=exponential(1/(ku*n+e))
        t4 = timer

        if t0 < t1 and t0 < t2 and t0<t3 and t0<t4: # AP occurrs
            b = binomial(n, pr)
            n-=b
            v+=c*b
            tmin = t0
            timer-=tmin
            prelist.append(tcurr+tmin)
                
        elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # add a docked vesicle
            L+=1
            tmin = t1
            timer-=tmin
            
        elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # add a docked vesicle
            n+=1
            L-=1
            tmin = t2
            timer-=tmin

        elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # add a docked vesicle
            n-=1
            L+=1
            tmin = t3
            timer-=tmin

        else:
            tmin=t4
            timer = delta_t
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                Llist.append(L)
                vthlist.append(vth)
                tlist.append(tcurr)
                
        tcurr += tmin
        if v>=vth:
            v=0
            postlist.append(tcurr)

        # Update the continuous dynamics
        v=v*exp(-tmin/tauv)
        

    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    FFn=np.var(nlist)/np.mean(nlist)
    FFv=np.var(Tlist)/Tmean
    
    return tlist, nlist, vlist, Llist, prelist, postlist, Tmean, FFn, FFv

def tmean(f,c,M,pr,kd,ku, tauv,vth):
    return tauv*np.log((c*f*ku*M*pr*tauv)/(c*f*ku*M*pr*tauv - kd*vth - ku*vth))

f=100
pr=0.3 #
M=100
c=0.01
tauv=5

kL=20 # Mean rate of loosely docking
kd=20 # Mean rate of docking
ku=10 # Mean rate of undocking

n=0
v=0
L=0
vth=0.2

delta_t = 0.001
tmax = 100 # <-------------- TMAX

check=vth* (kd + ku )/(c  *f * ku * M * pr * tauv) < 1
fmin = vth *(kd + ku )/(c * ku*  M*  pr*  tauv)
print(fmin)
if check == False:
    raise Exception('check failed')
# =============================================================================
# res=simulate(n, v, L, f, pr, M, kL, kd, ku, c, vth, tauv, tmax, delta_t)
# 
# plt.subplot(2,1,1)
# plt.plot(res[0], res[2], label='v')
# plt.plot(res[0], vth*np.ones(len(res[0])), label='vth')
# plt.subplot(2,1,2)
# plt.plot(res[0], res[1], label='n')
# plt.plot(res[0], res[3], label='L')
# plt.plot(res[0], M-(np.array(res[1])+np.array(res[3])), label='u')
# plt.legend()
# plt.show()
# =============================================================================


tvals=[]
FFvs=[]
nfs=100
fslist=np.linspace(1,100,nfs)
for j, f in enumerate(fslist):
    # Calculate test
    Tsim=[]
    FFnsim=[]
    FFvsim=[]
    nsim=20
    for i in range(nsim):
        print(j, nfs, i, nsim)
        _, _, _, _, _, _, T, FFn, FFv =simulate(n, v, L, f, pr, M, 
                            kL, kd, ku, c, vth, tauv, tmax, delta_t)
        Tsim.append(T)
        FFnsim.append(FFn)
        FFvsim.append(FFv)
    Tsim=np.mean(Tsim)
    FFnsim=np.mean(FFnsim)
    FFvsim=np.mean(FFvsim)
    tvals.append(Tsim)
    FFvs.append(FFvsim)
plt.subplot(2,1,1)
plt.plot(fslist, tvals, label='Tsim')
plt.plot(fslist, tmean(fslist, c, M, pr, kd, ku, tauv, vth), label='Teq')
plt.legend()
plt.subplot(2,1,2)
# =============================================================================
# plt.plot(fslist, FFvadapt(fslist, c, pr, k, M, tauv, vth), label='FFveq')
# =============================================================================
plt.plot(fslist, FFvs, label='FFvsim')
plt.xlabel('input frequency')
plt.legend()
plt.show()

# =============================================================================
# # Calculate test
# Tsim=[]
# FFnsim=[]
# FFvsim=[]
# nsim=100
# for i in range(nsim):
#     print(i, nsim)
#     _, _, _, _, _, _, T, FFn, FFv =simulate(n, v, f, pr, M, k, c, 
#                         vth, tauv, tauvth, vthb, tmax, delta_t)
#     Tsim.append(T)
#     FFnsim.append(FFn)
#     FFvsim.append(FFv)
# Tsim=np.mean(Tsim)
# FFnsim=np.mean(FFnsim)
# FFvsim=np.mean(FFvsim)
# =============================================================================

# =============================================================================
# res = simulate(n, v, f, pr, M, k, c, vth, tauv, tauvth, vthb, tmax, delta_t)
# Tsim=res[6]
# FFnsim=res[7]
# FFvsim=res[8]
# fig, ax = plt.subplots(2,1)
# ax[0].plot(res[0], res[2], label='v')
# ax[0].plot(res[0], res[3], label='vth')
# ax[1].plot(res[0], res[1])
# ax[0].plot([],[],' ', label='Tmean={}'.format(np.around(Tsim, 3)))
# for z in res[4]:
#     ax[0].axvline(x=z, color='k', alpha = 0.1)
# for z in res[5]:
#     ax[0].axvline(x=z, color='red', alpha = 0.5)
# ax[0].set_xticks([])
# ax[0].set_ylabel('membrane potential')
# ax[1].set_ylabel('vesicles')
# ax[0].legend()
# plt.show()
# =============================================================================

# =============================================================================
# Teq = tauv*np.log(1 + ((k + f*pr)*vth0)/(c*f*k*M*pr*tauv - (k + f*pr)*vthb))
# FFneq=((k + f*pr)*(-((k**2*M**2)/(k + f*pr)**2) + (k*M*(2*k*M - f*(-2 + pr)*pr))/((k + f*pr)*(2*k - f*(-2 + pr)*pr))))/(k*M)
# FFveq=(c*(2*k**3*(1 + (-1 + M)*pr)*tauv - f**2*(-2 + pr)*pr**2*(1 \
#       + f*pr*tauv) + k**2*(2 + 2*(-1 + M)*pr - f*(-2 + pr)*pr*tauv) + \
#       f*k*pr*(4 + pr*(-3 + 2*M + 2*f*tauv))))/(2.*(k + \
#       f*pr)*(2*k - f*(-2 + pr)*pr)*(1 + k*tauv + f*pr*tauv))
# check=(c *f *k *M *pr* tauv)/(k + f *pr) - vthb/vth0>0
# print('check', check)
# print('T eq sim')
# print(Teq, Tsim)
# print('FFn eq sim')
# print(FFneq, FFnsim)
# print('FFv eq sim')
# print(FFveq, FFvsim)
# =============================================================================
