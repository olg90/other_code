import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp

def simulate(n, v, L,R, f, pr, M, kL, kd, ku, kr, kR, c, vth, tauv, tmax, delta_t):

    nlist=[]
    Llist=[]
    vlist=[]
    Rlist=[]
    tlist=[]
    prelist=[]
    postlist=[]
    e=1e-9

    vplot=[]
    nplot=[]
    Lplot=[]
    tplot=[]
    Rplot=[]

    tcurr=0
    ratio = 0
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f) # action potential
        t1=exponential(1/(kL*(M-n-L) + e)) # site gets occupied
        t2=exponential(1/(kd*L+e))
        t3=exponential(1/(ku*n+e))
        t4=exponential(1/(kr*L+e))
        t5=exponential(1/(kR*R+e))
        t6 = timer

        if t0 < t1 and t0 < t2 and t0<t3 and t0<t4 and t0<t5 and t0<t6: # AP occurrs
            b = binomial(n, pr)
            n-=b
            R+=b
            v+=c*b
            tmin = t0
            timer-=tmin
            prelist.append(tcurr+tmin)
            
        elif t1<t0 and t1<t2 and t1<t3 and t1<t4 and t1<t5 and t1<t6: #
            L+=1
            tmin = t1
            timer-=tmin

        elif t2<t0 and t2<t1 and t2<t3 and t2<t4 and t2<t5 and t2<t6: #
            n+=1
            L-=1
            tmin = t2
            timer-=tmin

        elif t3<t0 and t3<t1 and t3<t2 and t3<t4 and t3<t5 and t3<t6: #
            n-=1
            L+=1
            tmin = t3
            timer-=tmin

        elif t4<t0 and t4<t1 and t4<t2 and t4<t3 and t4<t5 and t4<t6: #
            L-=1
            tmin = t4
            timer-=tmin
            
        elif t5<t0 and t5<t1 and t5<t2 and t5<t3 and t5<t4 and t5<t6: # repair

            R-=1
            tmin = t5
            timer-=tmin

        else:
            tmin=t6
            timer = delta_t
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                Llist.append(L)
                Rlist.append(R)
                tlist.append(tcurr)
                
        vplot.append(v)
        nplot.append(n)
        Lplot.append(L)
        Rplot.append(R)
        tplot.append(tcurr)
                
        tcurr += tmin
        if v>=vth:
            v=0
            postlist.append(tcurr)

        # Update the continuous dynamics
        v=v*exp(-tmin/tauv)

    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    CVn2=np.var(nlist)/np.mean(nlist)**2
    CVv2=np.var(vlist)/np.mean(vlist)**2
    CVL2=np.var(Llist)/np.mean(Llist)**2
    CVR2=np.var(Rlist)/np.mean(Rlist)**2
    CVT2=np.var(Tlist)/Tmean**2

    return tlist, nlist, vlist, Llist, Rlist, prelist, postlist, Tmean, CVn2,\
        CVv2, CVL2, CVR2, CVT2, FFL, tplot, nplot, Lplot, vplot, Rplot

def tmean(f,c,M,pr,kd,ku, kr, tauv,vth):
    return tauv*np.log(1/(1 - ((kd*(kL + f*pr) + (kL + kr)*(ku + f*pr))*vth)/(c*f*kd*kL*M*pr*tauv)))
def FF(name, f, c, M, pr, kd, ku, kL, tauv, vth):
    if name=='n':
        return ((kd + kL + ku)*(kd**2 + ku**2) + 2*(kd - ku)*(kd**2 + 2*kd*ku + ku*(kL + ku))*M)/(2.*ku*(kd + ku)*(kd + kL + ku))
    if name=='L':
        return ((kd + kL + ku)*(kd**2 + ku**2) - 2*(kd - ku)*(kd**2 + 2*kd*ku + ku*(-kL + ku))*M)/(2.*kd*(kd + ku)*(kd + kL + ku))
    if name == 'v':
        return (c*(2*ku*(kd + ku) + (kd**2 - 2*kd*ku - ku**2)*pr + (2*kd*(kd**2 + (kd + kL)*ku)*M*pr)/(kd + kL + ku) + \
               (2*f*pr*tauv*(kd**3 + kd**2*kL + kd**2*ku + kd*ku**2 + kL*ku**2 + ku**3 + 2*kd**3*M + 2*kd**2*ku*M + 2*kd*kL*ku*M - 2*kd*ku**2*M -\
               2*kL*ku**2*M - 2*ku**3*M + (kd + kL + ku)*(kL*(kd**2 + ku**2) + 2*(kd - ku)*(kd**2 + 2*kd*ku + ku*(kL + ku))*M)*tauv + \
               2*kL*(kd - ku)*ku*(kd + ku)*(kd + kL + ku)*M*tauv**2))/((kd + kL + ku)*(1 + kL*tauv)*(1 + (kd + ku)*tauv))))/(4.*ku*(kd + ku))
f=20
pr=0.2 #
M=100
c=0.01
tauv=0.1

kL=20 # Mean rate of loosely docking
kd=20 # Mean rate of docking
ku=10 # Mean rate of undocking
kr=10 # Mean unloosening
kR=10 # Mean repair

n=0
v=0
L=0
R=0
vth=0.2

delta_t = 0.001 
tmax = 1 # <-------------- TMAX

# =============================================================================
# res=simulate(n, v, L, R, f, pr, M, kL, kd, ku, kr, kR, c, vth, tauv, tmax, delta_t)
# 
# plt.subplot(2,1,1)
# plt.plot(res[11], res[14], label='v membrane')
# plt.plot(res[11], vth*np.ones(len(res[11])), label='AP threshold')
# plt.ylabel('membrane potential')
# plt.legend(loc='upper right')
# plt.subplot(2,1,2)
# plt.plot(res[11], res[12], label='tightly docked')
# plt.plot(res[11], res[13], label='loosely docked')
# plt.plot(res[11], M-(np.array(res[12])+np.array(res[13])+np.array(res[15])), label='undocked')
# plt.plot(res[11], res[15], label='repair sites')
# plt.ylabel('# of docking sites')
# plt.xlabel('time (sec)')
# plt.legend(loc='upper right')
# plt.show()
# =============================================================================

## Simulate T mean plot with averages
tvals=[]
FFvs=[]
FFns=[]
FFLs=[]
nfs=10
fslist=np.linspace(1,100,nfs)
for j, f in enumerate(fslist):
    # Calculate test
    Tsim=[]
    FFnsim=[]
    FFvsim=[]
    FFLsim=[]
    navgs=1
    for i in range(navgs):
        print(j, nfs, i, navgs)
        _, _, _, _, _, _, T, FFn, FFv, FFL = simulate(n, v, L, R, f, pr, M, 
                                                      kL, kd, ku, kr, kR, c, 
                                                      vth, tauv, tmax, delta_t)
        Tsim.append(T)
        FFnsim.append(FFn)
        FFvsim.append(FFv)
        FFLsim.append(FFL)
    tvals.append(np.mean(Tsim))
    FFvs.append(np.mean(FFvsim))    
    FFns.append(np.mean(FFnsim))
    FFLs.append(np.mean(FFLsim))
plt.plot(fslist, tvals, label='<T> simulations')
plt.plot(fslist, tmean(fslist, c, M, pr, kd, ku, kd, tauv, vth), label='<T> theoretical')
plt.legend()

# =============================================================================
# plt.subplot(4,1,2)
# plt.plot(fslist, FF('v', fslist, c, M, pr, kd, ku, kL, tauv, vth), label='FFveqv')
# plt.plot(fslist, FFvs, label='FFvsim')
# plt.legend()
# plt.show()
# plt.subplot(4,1,3)
# plt.plot(fslist, FF('n', fslist, c, M, pr, kd, ku, kL, tauv, vth), label='FFveqn')
# plt.plot(fslist, FFns, label='FFnsim')
# plt.legend()
# plt.subplot(4,1,4)
# plt.plot(fslist, FF('L', fslist, c, M, pr, kd, ku, kL, tauv, vth), label='FFveqL')
# plt.plot(fslist, FFLs, label='FFLsim')
# plt.legend()
# plt.xlabel('input frequency')
# =============================================================================

# =============================================================================
# # Calculate test
# Tsim=[]
# FFnsim=[]
# FFvsim=[]
# nsim=100
# for i in range(nsim):
#     print(i, nsim)
#     _, _, _, _, _, _, T, FFn, FFv =simulate(n, v, f, pr, M, k, c, 
#                         vth, tauv, tauvth, vthb, tmax, delta_t)
#     Tsim.append(T)
#     FFnsim.append(FFn)
#     FFvsim.append(FFv)
# Tsim=np.mean(Tsim)
# FFnsim=np.mean(FFnsim)
# FFvsim=np.mean(FFvsim)
# =============================================================================

# =============================================================================
# res = simulate(n, v, L, f, pr, M, kL, kd, ku, kr, c, vth, tauv, tmax, delta_t)
# Tsim=res[6]
# FFnsim=res[7]
# FFvsim=res[8]
# fig, ax = plt.subplots(2,1)
# ax[0].plot(res[0], res[2], label='v')
# ax[0].plot(res[0], res[3], label='vth')
# ax[1].plot(res[0], res[1])
# ax[0].plot([],[],' ', label='Tmean={}'.format(np.around(Tsim, 3)))
# for z in res[4]:
#     ax[0].axvline(x=z, color='k', alpha = 0.1)
# for z in res[5]:
#     ax[0].axvline(x=z, color='red', alpha = 0.5)
# ax[0].set_xticks([])
# ax[0].set_ylabel('membrane potential')
# ax[1].set_ylabel('vesicles')
# ax[0].legend()
# plt.show()
# =============================================================================

# =============================================================================
# Teq = tauv*np.log(1 + ((k + f*pr)*vth0)/(c*f*k*M*pr*tauv - (k + f*pr)*vthb))
# FFneq=((k + f*pr)*(-((k**2*M**2)/(k + f*pr)**2) + (k*M*(2*k*M - f*(-2 + pr)*pr))/((k + f*pr)*(2*k - f*(-2 + pr)*pr))))/(k*M)
# FFveq=(c*(2*k**3*(1 + (-1 + M)*pr)*tauv - f**2*(-2 + pr)*pr**2*(1 \
#       + f*pr*tauv) + k**2*(2 + 2*(-1 + M)*pr - f*(-2 + pr)*pr*tauv) + \
#       f*k*pr*(4 + pr*(-3 + 2*M + 2*f*tauv))))/(2.*(k + \
#       f*pr)*(2*k - f*(-2 + pr)*pr)*(1 + k*tauv + f*pr*tauv))
# check=(c *f *k *M *pr* tauv)/(k + f *pr) - vthb/vth0>0
# print('check', check)
# print('T eq sim')
# print(Teq, Tsim)
# print('FFn eq sim')
# print(FFneq, FFnsim)
# print('FFv eq sim')
# print(FFveq, FFvsim)
# =============================================================================
