import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp

def simulate(n, v, z, f, pr, M, k, c, cz, c1, cmax, gammaz, tauv, vth, tmax, delta_t):

    nlist=[]
    vlist=[]
    zlist=[]
    tlist=[]
    prelist=[]
    postlist=[]

    tcurr=0
    
    ratio = 0

    timer = delta_t
    
    e = 1e-9

    while tcurr < tmax:

        t0=exponential(1/f) # action potential
        t1=exponential(1/(k*(M-n) + e)) # site gets occupied
        t2=exponential(1/(gammaz*z + e))
        t3=timer

        if t0 < t1 and t0 < t2 and t0<t3: # AP occurrs
            b = binomial(n, pr)
            n-=b
            v+=c(z, cmax, c1)*b
            z+=cz*b
            prelist.append(tcurr)
            tmin = t0
            timer-=tmin
                
        elif t1<t0 and t1<t2 and t1<t3: # add a docked vesicle
            n+=1
            tmin = t1
            timer-=tmin
            
        elif t2<t0 and t2<t1 and t2<t3: # add a docked vesicle
            z-=1
            tmin = t3
            timer-=tmin

        else:
            timer = t3
            tmin=timer
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                zlist.append(z)
                tlist.append(tcurr)
            timer=delta_t
                
        if v>=vth:
            v=0
            postlist.append(tcurr)

        # Update the continuous dynamics
        v=v*exp(-tmin/tauv)
        tcurr += tmin

    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    FFn=np.var(nlist)/np.mean(nlist)
    FFv=np.var(Tlist)/Tmean
    
    return tlist, nlist, vlist, zlist, prelist, postlist, Tmean, FFn, FFv

def c(z,cmax, c1):
    return cmax/(1+c1*z)
    
f=10
pr=0.2 #
M=100
k=10 #

cmax=0.005
c1=0.01

cz=10
gammaz=100

tauv=1
vth=0.2

n=M # occupied states
v=0
z=0

delta_t = 0.001
tmax = 200 # <-------------- TMAX

# =============================================================================
# Tsim=[]
# nsim=100
# for i in range(nsim):
#     print(i, nsim)
#     T=simulate(n, v, z, f, pr, M, k, c, cz, c1, cmax, 
#                gammaz, tauv, vth, tmax, delta_t)[6]
#     Tsim.append(T)
# Tmean=np.mean(Tsim)
# =============================================================================

# =============================================================================
# res=simulate(n, v, z, f, pr, M, k, c, cz, c1, 
#              cmax, gammaz, tauv, vth, tmax, delta_t)
# Tmean=res[6]
# fig, ax = plt.subplots(3,1)
# ax[0].plot(res[0], res[2], label='v')
# ax[0].plot(res[0], vth*np.ones(len(res[0])), label='vth')
# ax[1].plot(res[0], res[1])
# 
# for z in res[5]:
#     ax[0].axvline(x=z, color='r', alpha = 0.3)
# ax[0].set_xticks([])
# ax[0].set_ylabel('v')
# ax[1].set_ylabel('n')
# 
# ax[2].plot(res[0], res[3])
# ax[2].set_ylabel('z')
# plt.show()
# =============================================================================

def tmeanc(f,c,pr,k,M,tauv,vth):
    return ((gammaz*k + f*gammaz*pr + c1*cz*f*k*M*pr)*vth)/(cmax*f*gammaz*k*M*pr)
    
tvals=[]
FFvs=[]
nfs=20
fslist=np.linspace(1,100,nfs)
for j, f in enumerate(fslist):
    # Calculate test
    Tsim=[]
    FFnsim=[]
    FFvsim=[]
    nsim=20
    for i in range(nsim):
        print(j, nfs, i, nsim)
        _, _, _, _, _, _, T, FFn, FFv =simulate(n, v, z, f, pr,
                M, k, c, cz, c1, cmax, gammaz, tauv, vth, tmax, delta_t)
        Tsim.append(T)
        FFnsim.append(FFn)
        FFvsim.append(FFv)
    Tsim=np.mean(Tsim)
    FFnsim=np.mean(FFnsim)
    FFvsim=np.mean(FFvsim)
    tvals.append(Tsim)
    FFvs.append(FFvsim)

# =============================================================================
# plt.subplot(2,1,1)
# =============================================================================
plt.plot(fslist, tvals, label='Tsim')
plt.plot(fslist, tmeanc(fslist, c, pr, k, M, tauv, vth), label='Teq')
plt.legend()
# =============================================================================
# plt.subplot(2,1,2)
# plt.plot(fslist, FFvadapt(fslist, c, pr, k, M, tauv, vth), label='FFveq')
# plt.plot(fslist, FFvs, label='FFvsim')
# plt.xlabel('input frequency')
# plt.legend()
# plt.show()
# =============================================================================
