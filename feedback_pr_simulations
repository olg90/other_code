import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial
# =============================================================================
#      no -> no + 1   with rate   K*(M-n-r), where K is: (-): k/(1+k1 z)
#                                             (+):kb+(k-kb)( k1 z / (1+ k1 z))
# 
# 
#      n -> n - b   with rate   f
#      r -> r + b
#      z -> z + cb
# 
# 
#      r -> r - 1   with rate   kr * r
#                   
# 
#      z -> z - 1     with rate   gammaz*z
# ============================================================================= 

def get_FF(x):
    return np.var(x)/np.mean(x)

def getCV2(x):
    return np.var(x)/np.mean(x)**2

def simulate(f, pru, prn, p1n, prp, p1p, pb, M, k, gammaz, gammar, cz, ftype, tmax, delta_t):
        nlist=[]
        rlist=[]
        zlist=[]
        tlist=[]        
        APlist=[]
        
        n,r,z=0,0,0

        tcurr=0

        timer = delta_t
        ratio=0.4
        e=1e-6
        
        while tcurr < tmax:
            print(tcurr/tmax)
            
            # Get the three event times
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n) + e)) # add 1 occupied site
            t2=exponential(1/(gammaz*z + e)) # remove 1 neurotransmitter
            t3=exponential(1/(gammar*r + e))
            t4=timer

            # Choose the smallest one and then make that event happen
            if t0<t1 and t0<t2 and t0<t3 and t0<timer: # AP occurrs
                b = binomial(n, pr(z, pru, prn, p1n, prp, p1p, pb, ftype))
                n = n - b
                z = z + cz*b
                r += b
                if tcurr>=ratio*tmax:
                    APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin

            elif t1<t0 and t1<t2 and t1<t3 and t1<timer: # add a docked vesicle
                n=n+1
                tmin = t1
                timer-=tmin

            elif t2<t0 and t2<t1 and t2<t3 and t2<timer: # remove a neurotransmitter
                z=z-1
                tmin = t2
                timer-=tmin
                
            elif t3<t0 and t3<t1 and t3<t2 and t3<timer: # remove a repair site
                r=r-1
                tmin = t3
                timer-=tmin
                
            else:
                tmin=t4
                timer = delta_t
                if tcurr>=ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            tcurr += tmin
           

            nmean=np.mean(nlist)
            rmean=np.mean(rlist)
            zmean=np.mean(zlist)

            ffn=np.var(nlist)/nmean
            ffr=np.var(rlist)/rmean
            ffz=np.var(zlist)/zmean
            
            
        return nmean, rmean, zmean, ffn, ffr, ffz
#       0-4 lists, 5-7 means, 8-10 ffs
# =============================================================================
#         return tlist, nlist, rlist, zlist, APlist, \
#             nmean, rmean, zmean, \
#                 ffn, ffr, ffz
# =============================================================================
# =============================================================================
#         return Tmean, CV2
# =============================================================================
    
def pr(z, pru, prn, p1n, prp, p1p, pb, ftype):

    if ftype == 'u':
        return pru
    if ftype=='n':
        return prn/(1+p1n*z)
    if ftype=='p':
        return pb + (prp-pb)*p1p*z/(1+p1p*z)
    
###############################################################################
#
#                               Parameters
#
###############################################################################
    
ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
M=100
k=10 # 10 
gammaz=50
cz=50 # number of neurotransmitters per vesicle
gammar=10

pru=0.2 # Unregulated

prn = 0.5 #  -------------- Negative feedback
p1n = 0.001 # fb strength

prp = 1 # prob
p1p = 0.001 # Positive feedback
pb = 0.2 # 0.5, basal rate, %

delta_t = 0.001
tmax = 100

# =============================================================================
# res=simulate(f, pru, prn, p1n, prp, p1p, pb, M, k, 
#              gammaz, gammar, cz, ftype, tmax, delta_t)
# 
# print(res[3])
# =============================================================================

# =============================================================================
# res=simulate(f, pr, M, k, gammaz, gammar, cz, ftype, tmax, delta_t)
# fig, ax = plt.subplots(2,1)
# ax[0].plot(res[0], res[1], label='n')
# ax[0].plot(res[0], res[2], label='r')
# ax[1].plot(res[0], res[3])
# ax[0].legend()
# ax[1].set_ylabel('z')
# =============================================================================

navgs=1
fnf=[]
frf=[]
fzf=[]
fnu=[]
fru=[]
fzu=[]
for j in range(navgs):
    fnfj=[]
    frfj=[]
    fzfj=[]
    fnuj=[]
    fruj=[]
    fzuj=[]

    xname='f'
    xlist=np.linspace(0.01, 100, 20)
    for i, x in enumerate(xlist):
        print(j, navgs, i, len(xlist))
        resf=simulate(f, pru, prn, p1n, prp, p1p, pb, M, k, 
                     gammaz, gammar, cz, ftype, tmax, delta_t)
        resu=simulate(f, pru, prn, p1n, prp, p1p, pb, M, k, 
                      gammaz, gammar, cz, 'u', tmax, delta_t)
        fnfj.append(resf[3])
        frfj.append(resf[4])
        fzfj.append(resf[5])
        fnuj.append(resu[5])
        fruj.append(resu[5])
        fzuj.append(resu[5])
    fnf.append(fnfj)
    frf.append(frfj)
    fzf.append(fzfj)
    fnu.append(fnuj)
    fru.append(fruj)
    fzu.append(fzuj)
fnfm = np.mean(np.array(fnf),0)
frfm = np.mean(np.array(frf),0)
fzfm = np.mean(np.array(fzf),0)
fnum = np.mean(np.array(fnu),0)
frum = np.mean(np.array(fru),0)
fzum = np.mean(np.array(fzu),0)

fig, ax = plt.subplots(3,1, figsize=(6,6))
ax[0].set_title('feedback in pr')

ax[0].plot(xlist, fnfm, label='nf', color='b')
ax[0].plot(xlist, fnum, label='nu', color='b', linestyle='--', alpha=0.5)
ax[0].set_xticks([])
ax[0].plot([],[], ' ', label='f={}, M={}, k={}'.format(f,M,k))
ax[0].plot([],[], ' ', label='gammaz={}, cz={}, gammar={}'.format(gammaz,cz, gammar))
ax[0].plot([],[], ' ', label='pru={}, prn={}, p1n={}'.format(pru, prn, p1n))
ax[0].plot([],[], ' ', label='prp={}, p1p={}, pb={}'.format(prp, p1p, pb))
ax[0].plot([],[], ' ', label='ftype={}, dt={}, tmax={}'.format(ftype, delta_t, tmax))
ax[0].legend(loc='upper right')
ax[0].set_ylabel('n')

ax[1].plot(xlist, frfm, label='rf', color='b')
ax[1].plot(xlist, frum, label='ru', color='b', linestyle='--', alpha=0.5)
ax[1].set_xticks([])
ax[1].set_ylabel('r')

ax[2].plot(xlist, fzfm, label='zf', color='b')
ax[2].plot(xlist, fzum, label='zu', color='b', linestyle='--', alpha=0.5)
ax[2].set_xlabel('{}'.format(xname))
ax[2].set_ylabel('z')

plt.show()
