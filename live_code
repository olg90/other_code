import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class SignalPlotterApp:
    def __init__(self, root, parameters):
        root.title("Signal Plotter")

        # Tokenize the input string based on commas and remove spaces
        parameter_names = [param.strip() for param in parameters.split(',')]

        # Initialize variables and sliders
        self.vars = {}
        self.sliders = []
        self.parameter_names = parameter_names

        for param_name in parameter_names:
            initial_value = 5
            var = tk.DoubleVar(value=initial_value)
            setattr(self, f"{param_name}_min_var", tk.DoubleVar(value=0))
            setattr(self, f"{param_name}_max_var", tk.DoubleVar(value=10))
            setattr(self, param_name, var)  # Create instance variables like self.parameter_name
            self.vars[param_name] = var

            slider = self.create_slider(root, param_name, var,
                                        getattr(self, f"{param_name}_min_var"),
                                        getattr(self, f"{param_name}_max_var"))
            self.sliders.append(slider)
            slider['frame'].grid(row=parameter_names.index(param_name), column=0, padx=10, pady=5, sticky=tk.W)

        # Create update parameters button and signal plot
        self.create_update_params_button(root)
        self.create_signal_plot(root)

        # Configure row and column to expand proportionally
        root.rowconfigure(0, weight=1)
        root.columnconfigure(1, weight=1)

        # Initialize the plot
        self.update_plot()

    def create_slider(self, root, label_text, slider_var, min_var, max_var):
        frame = ttk.Frame(root, padding=(5, 5, 5, 5))
        label = ttk.Label(frame, text=label_text)
        label.grid(row=0, column=0, sticky=tk.E, padx=5)
        xmin_entry = ttk.Entry(frame, textvariable=min_var, width=5)
        xmin_entry.grid(row=0, column=1, padx=5)
        slider = ttk.Scale(frame, from_=float(min_var.get()), to=float(max_var.get()), orient=tk.HORIZONTAL,
                           length=200, variable=slider_var, command=self.update_plot)
        slider.grid(row=0, column=2, padx=5)
        xmax_entry = ttk.Entry(frame, textvariable=max_var, width=5)
        xmax_entry.grid(row=0, column=3, padx=5)
        xmax_label = ttk.Label(frame, text=f"Value: {max_var.get():.2f}")
        xmax_label.grid(row=0, column=4, padx=5, sticky=tk.W)

        return {'frame': frame, 'slider': slider, 'xmax_label': xmax_label}

    def create_update_params_button(self, root):
        update_params_button = ttk.Button(root, text="Update Parameters", command=self.update_parameters)
        update_params_button.grid(row=len(self.parameter_names), column=0, pady=10)

    def create_signal_plot(self, root):
        self.fig, self.ax = plt.subplots(figsize=(6, 4))
        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.grid(row=0, column=1, rowspan=len(self.parameter_names), padx=10, pady=10, sticky=tk.W + tk.E + tk.N + tk.S)

    def update_parameters(self):
        for slider in self.sliders:
            min_var = slider['frame'].children['!entry']
            max_var = slider['frame'].children['!entry2']
            slider['slider'].configure(from_=float(min_var.get()), to=float(max_var.get()))

        # Call the update function after updating parameters
        self.update_plot()

    def update_plot(self, *args):
        x = np.linspace(0, 1, 1000)
        D = self.D.get()

        # Sin wave
        sin_wave = self.A.get() * np.sin(self.B.get() * x**D + self.C.get())

        # Exponential function
        exp_function = self.A.get() * np.exp(-self.B.get() * x / self.C.get())

        # Logarithmic function
        log_function = self.A.get() * np.log(self.B.get() * (x + 1) * self.C.get())

        self.ax.clear()
        self.ax.plot(x, sin_wave, 'k', label='Sin Wave', linewidth=2.0)
        self.ax.plot(x, exp_function, 'r--', label='Exponential')
        self.ax.plot(x, log_function, 'b--', label='Logarithmic')
        self.ax.legend()
        self.ax.set_xlabel('x')
        self.ax.set_ylabel('Signal')
        self.canvas.draw()

        # Update the slider labels with current values
        for slider in self.sliders:
            param_name = slider['frame'].children['!label'].cget("text")
            value = getattr(self, param_name).get()
            slider['xmax_label'].configure(text=f"Value: {value:.2f}")

# Example usage
# parameter_names
parameters = 'A, B, C, D'

root = tk.Tk()
app = SignalPlotterApp(root, parameters)
root.mainloop()
