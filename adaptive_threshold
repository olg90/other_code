import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp
def simulate(n, v, f, pr, M, k, c, vth, tauv, tauvth, vth0, vthb, tmax, delta_t, ttype):

    nlist=[]
    vlist=[]
    vthlist=[]
    tlist=[]
    prelist=[]
    postlist=[]
    
    tplot=[]
    vplot=[]
    nplot=[]
    vthplot=[]
    
    postvth=[]

    tcurr=0
    ratio = 0.4
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f) # action potential
        t1=exponential(1/(k*(M-n) + 1e-6)) # site gets occupied
        t2 = timer

        if t0 < t1 and t0 < t2: # AP occurrs
            b = binomial(n, pr)
            n-=b
            v+=c*b
            tmin = t0
            timer-=tmin
            prelist.append(tcurr+tmin)
            

        elif t1<t0 and t1<t2: # add a docked vesicle
            n+=1
            tmin = t1
            timer-=tmin

        else:
            tmin=t2
            timer = delta_t
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                vthlist.append(vth)
                tlist.append(tcurr)
                
                
        tplot.append(tcurr)
        vplot.append(v)
        nplot.append(n)
        vthplot.append(vth)
                
                
        tcurr += tmin
        if v>=vth:
            postlist.append(tcurr)
            postvth.append(vth)
            if ttype=='adaptive':
                vth=get_vth(v, vth)
            else:
                vth=vth
            v=0

        # Update the continuous dynamics
        v=v*exp(-tmin/tauv)
        if ttype=='adaptive':
            vth=vthb + (vth - vthb)*exp(-tmin/tauvth)
        else:
            vth=vth
        
        
    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    CVT2=np.var(Tlist)/Tmean**2
    FFn=np.var(nlist)/np.mean(nlist)
    FFv=np.var(vlist)/np.mean(vlist)
    
    return tlist, nlist, vlist, vthlist, prelist, postlist, Tmean, CVT2, FFn, FFv,\
        tplot, vplot, nplot, vthplot, postvth
        
        
def get_vth(vth, v):
    return vth + np.abs(vth-v)

# =============================================================================
# def tmeanopen(f, c, pr, k, M, tauv, vth):
#     return tauv*np.log(1/(1-vth/(c*f*k*pr*M*tauv/(f*pr+k))))
# 
# def tmeanadapt(f, c, pr, k, M, tauv, vth):
#     return tauv*np.log(1 + ((k + f*pr)*vth0)/(c*f*k*M*pr*tauv - (k + f*pr)*vthb))
# 
# def FFvadapt(f,c,pr,k,M,tauv,vth):
#     return (c*(2*k**3*(1 + (-1 + M)*pr)*tauv - f**2*(-2 + pr)*pr**2*(1 \
#           + f*pr*tauv) + k**2*(2 + 2*(-1 + M)*pr - f*(-2 + pr)*pr*tauv) + \
#           f*k*pr*(4 + pr*(-3 + 2*M + 2*f*tauv))))/(2.*(k + \
#           f*pr)*(2*k - f*(-2 + pr)*pr)*(1 + k*tauv + f*pr*tauv))
#                                                        
# def FFnadapt(f,c,pr,k,M,tauv,vth):
#     return 1 - (k*M)/(k + f*pr) + (2*k*(-1 + M))/(2*k - f*(-2 + pr)*pr)                                                 
# 
# =============================================================================
f=10
pr=1 #
M=100
k=10 # 10 # 10 # feedback strength constant #
c=0.003
tauv=1
tauvth=1

n=0 # occupied states
v=0
vth0=0.3
vthb=0.2
vth=vth0

delta_t = 0.001
tmax = 100 # <-------------- TMAX

fmin=(k*vthb)/(vth0*(c*k*M*pr*tauv - (pr*vthb)/vth0))
print('fmin', fmin)

# =============================================================================
# res=simulate(n, v, f, pr, M, k, c, vth, tauv, tauvth, vth0, vthb, tmax, delta_t)
# plt.plot(res[10], res[11], label='membrane potential')
# plt.plot(res[10], res[13], label='AP firing threshold')
# plt.ylabel('volts')
# plt.xlabel('time (sec)')
# plt.plot([],[], ' ', label='f={}, M={}, k={}, pr={}, c={}'.format(f,M,k, pr, c))
# plt.plot([],[], ' ', label='tauv={}, tauvth={}, vthb={}'.format(tauv, tauvth, vthb))
# plt.plot([],[], ' ', label='tmax={}, delta_t={}'.format(tmax, delta_t))
# 
# plt.legend(bbox_to_anchor=[0.85,1.4], loc='upper right')
# =============================================================================

navgs=10
Ta=[]
T0=[]
Ca=[]
C0=[]
for j in range(navgs):
    Taj=[]
    Caj=[]  
    T0j=[]
    C0j=[]
    xname='f'
    xlist=np.linspace(0.01, 100, 100)
    for i, x in enumerate(xlist):
        print(j, navgs, i, len(xlist))
        res=simulate(n, v, x, pr, M, k, c, vth, tauv, tauvth, vth0, vthb, tmax, delta_t, 'adaptive')
        res0=simulate(n, v, x, pr, M, k, c, vth, tauv, tauvth, vth0, vth0, tmax, delta_t, None)
    # =============================================================================
    ##               (n, v, f, pr, M, k, c, vth, tauv, tauvth, vth0, vthb, tmax, delta_t, None)
    # =============================================================================
        Taj.append(res[6])
        Caj.append(res[7])
        T0j.append(res0[6])
        C0j.append(res0[7])
    Ta.append(Taj)
    T0.append(T0j)
    Ca.append(Caj)
    C0.append(C0j)

Ta = np.mean(np.array(Ta), 0)
Ca = np.mean(np.array(Ca), 0)
T0 = np.mean(np.array(T0), 0)
C0 = np.mean(np.array(C0), 0)

fig, ax = plt.subplots(3,1, figsize=(5,5))
ax[0].set_title('Adaptive threshold ')
ax[0].plot(xlist, Ta, color='blue')
ax[0].plot(xlist, T0, color='blue', linestyle='--', alpha=0.6)
ax[0].set_xticks([])
ax[0].set_ylabel('First passage time')
ax[0].plot([],[], ' ', label='f={}, M={}, k={}, pr={}, c={}'.format(f,M,k, pr, c))
ax[0].plot([],[], ' ', label='tauv={}, tauvth={}, vthb={}'.format(tauv, tauvth, vthb))
ax[0].plot([],[], ' ', label='tmax={}, delta_t={}'.format(tmax, delta_t))
ax[0].legend()

ax[1].plot(xlist, Ca, color='orange', label='adaptive')
ax[1].plot(xlist, C0, color='orange', linestyle='--', alpha=0.6, label='fixed threshold')
ax[1].set_ylabel('Noise in FPT\n(CV squared)')
ax[1].set_xticks([])
ax[1].legend()

ax[2].plot(xlist, np.ones(len(xlist)), color='k')
ax[2].plot(xlist, Ca/C0, color='green')
ax[2].set_xlabel('{}'.format(xname))
ax[2].set_ylabel('Ratio of adaptvie\nand fixed CV^2\'s')

# -----------------------------------------------------------------------------


# =============================================================================
# tvals=[]
# FFvs=[]
# FFns=[]
# nfs=10
# fslist=np.linspace(1,100,nfs)
# for j, f in enumerate(fslist):
#     # Calculate test
#     Tsim=[]
#     FFnsim=[]
#     FFvsim=[]
#     nsim=10
#     for i in range(nsim):
#         print(j, nfs, i, nsim)
#         res=simulate(n, v, f, pr, M, k, c, 
#                     vth, tauv, tauvth, vth0, vthb, tmax, delta_t)
#         Tsim.append(res[6])
#         FFnsim.append(res[7])
#         FFvsim.append(res[8])
#     Tsim=np.mean(Tsim)
#     FFnsim=np.mean(FFnsim)
#     FFvsim=np.mean(FFvsim)
#     tvals.append(Tsim)
#     FFvs.append(FFvsim)
#     FFns.append(FFnsim)
#     
# plt.subplot(3,1,1)
# plt.plot(fslist, tmeanadapt(fslist, c, pr, k, M, tauv, vth), label='Teq')
# plt.plot(fslist, tvals, label='Tsim')
# plt.legend()
# plt.subplot(3,1,2)
# plt.plot(fslist, FFvadapt(fslist, c, pr, k, M, tauv, vth), label='FFveq')
# plt.plot(fslist, FFvs, label='FFvsim')
# plt.xlabel('input frequency')
# plt.legend()
# plt.subplot(3,1,3)
# plt.plot(fslist, FFnadapt(fslist, c, pr, k, M, tauv, vth), label='FFneq')
# plt.plot(fslist, FFns, label='FFnsim')
# plt.xlabel('input frequency')
# plt.legend()
# plt.show()
# 
# =============================================================================
# =============================================================================
# # Calculate test
# Tsim=[]
# FFnsim=[]
# FFvsim=[]
# nsim=100
# for i in range(nsim):
#     print(i, nsim)
#     _, _, _, _, _, _, T, FFn, FFv =simulate(n, v, f, pr, M, k, c, 
#                         vth, tauv, tauvth, vthb, tmax, delta_t)
#     Tsim.append(T)
#     FFnsim.append(FFn)
#     FFvsim.append(FFv)
# Tsim=np.mean(Tsim)
# FFnsim=np.mean(FFnsim)
# FFvsim=np.mean(FFvsim)
# =============================================================================

# =============================================================================
# res = simulate(n, v, f, pr, M, k, c, vth, tauv, tauvth, vth0, vthb, tmax, delta_t)
# Tsim=res[6]
# FFnsim=res[7]
# FFvsim=res[8]
# fig, ax = plt.subplots(2,1)
# ax[0].plot(res[9], res[10], label='v')
# ax[0].plot(res[9], res[12], label='vth')
# ax[0].plot(res[5], res[13], 'ro')
# ax[1].plot(res[9], res[11])
# ax[0].plot([],[],' ', label='Tmean={}'.format(np.around(Tsim, 3)))
# ax[0].set_xticks([])
# ax[0].set_ylabel('membrane potential')
# ax[1].set_ylabel('vesicles')
# ax[0].legend()
# plt.show()
# =============================================================================


# =============================================================================
# Teq = tauv*np.log(1 + ((k + f*pr)*vth0)/(c*f*k*M*pr*tauv - (k + f*pr)*vthb))
# FFneq=((k + f*pr)*(-((k**2*M**2)/(k + f*pr)**2) + (k*M*(2*k*M - f*(-2 + pr)*pr))/((k + f*pr)*(2*k - f*(-2 + pr)*pr))))/(k*M)
# FFveq=(c*(2*k**3*(1 + (-1 + M)*pr)*tauv - f**2*(-2 + pr)*pr**2*(1 \
#       + f*pr*tauv) + k**2*(2 + 2*(-1 + M)*pr - f*(-2 + pr)*pr*tauv) + \
#       f*k*pr*(4 + pr*(-3 + 2*M + 2*f*tauv))))/(2.*(k + \
#       f*pr)*(2*k - f*(-2 + pr)*pr)*(1 + k*tauv + f*pr*tauv))
# check=(c *f *k *M *pr* tauv)/(k + f *pr) - vthb/vth0>0
# print('check', check)
# print('T eq sim')
# print(Teq, Tsim)
# print('FFn eq sim')
# print(FFneq, FFnsim)
# print('FFv eq sim')
# print(FFveq, FFvsim)
# =============================================================================
