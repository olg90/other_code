import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial
# =============================================================================
#      no -> no + 1   with rate   K*(M-n-r), where K is: (-): k/(1+k1 z)
#                                             (+):kb+(k-kb)( k1 z / (1+ k1 z))
# 
# 
#      n -> n - b   with rate   f
#      r -> r + b
#      z -> z + cb
# 
# 
#      r -> r - 1   with rate   kr * r
#                   
# 
#      z -> z - 1     with rate   gammaz*z
# ============================================================================= 

def get_FF(x):
    return np.var(x)/np.mean(x)

# =============================================================================
# def kreg(z, k, k1, kb, ftype):
#     if ftype=='n':
#         return k/(1+k1*z)
#     if ftype=='p':
#         return kb+(k-kb)*(k1*z/(1+k1*z))
#     if ftype=='u':
#         return k
# =============================================================================

def simulate(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax):

        nlist=[n]
        zlist=[z]
        rlist=[r]
        
        tlist=[0]
        APlist=[]

        tcurr=0

        delta_t = 0.1 # longer than the typical autocorrelation time of the system
        # longer than the typical duration of the shortest reaction
        timer = delta_t
        
        while tcurr < tmax:

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3=exponential(1/(kr*r + 1e-6)) # repair a site
            
            eventtimes = [t0, t1, t2, t3]
            argmin = np.argmin(eventtimes)
            tmin = np.min(eventtimes)
            
            if argmin==0: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                APlist.append(tcurr+tmin)
                
            elif argmin==1: # site is occuped
                if n < M:
                    n=n+1

            elif argmin == 2: # neurotransmitter is removed
                if z > 0:
                    z=z-1
                    
            else: # site is repaired
                if r > 0: 
                    r = r-1
                    
            nlist.append(n)
            rlist.append(r)
            zlist.append(z)
            
            tcurr += tmin
            tlist.append(tcurr)
        
        return tlist, nlist, rlist, zlist, APlist
    
def simulate_kr_inf(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax):
        nlist=[n]
        rlist=[r]
        zlist=[z]
        tlist=[0]        
        APlist=[]

        tcurr=0
        delta_t = 0.1 # longer than the typical autocorrelation time of the system
        # longer than the typical duration of the shortest reaction
        timer = delta_t
        
        while tcurr < tmax:
            
            # Get the three event times
            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n) + 1e-6)) # empty to occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove 1 neurotransmitter
            t3 = timer
            
            # Choose the smallest one and then make that event happen
            eventtimes = [t0, t1, t2, t3]
            argmin = np.argmin(eventtimes)
            tmin = np.min(eventtimes)
            
            if argmin==0: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                z = z + cz*b
                APlist.append(tcurr+t0)
                
            if argmin==1: # add a docked vesicle
                if n < M:
                    n=n+1
                    
            if argmin==2: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                    
            timer -= tmin
                    
            if argmin == 3:
                timer = delta_t
                nlist.append(n)
                rlist.append(r)
                zlist.append(z)
            
            tcurr += tmin
            tlist.append(tcurr)
        
        return tlist, nlist, rlist, zlist, APlist

###############################################################################
#
#                               Parameters
#
###############################################################################

ftype='u' # feedback type: n-negative, p-positive, u-unregulated
f=10
pr=0.5 #
M=100 

n=M # occupied states
r=0 #  repair states

k=10 # feedback strength constant
k1=10 # negative feedback strength, (-) speed of k-> 0, (+) speed of kb->k
kr=100 # repair rate, 15 for good plot, rate of nr->nu
kb=10 # base rate

gammaz=100 # neurotransmitter decay rate
cz=100 # number of neurotransmitters per vesicle
z=0 # neurotransmitters

tmax=200 # <-------------- TMAX



# approx 100 x the slowest time

# run ntimes then average, CI std of output divide by sqrt(n)


# =============================================================================
# f = 10;
# pr = 0.5;
# M = 100;
# keq = 5;
# c = 100;
# d = 100;
# =============================================================================

# -----------------------------------------------------------------------------
###############################################################################
#
#                               Run test
#
###############################################################################

# =============================================================================
# tlist, nlist, rlist, zlist, APlist = \
#     simulate(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax)
# =============================================================================
# =============================================================================
#     
# tlist, nlist, rlist, zlist, APlist = \
#     simulate(f, pr, M, n, r, z, k, k1, kb, kr, gammaz, cz, ftype, tmax)    
#     
# 
# ulist = M - np.array(nlist)-np.array(rlist)
# 
# ratio = 0.2
# 
# nss = nlist[int(ratio*len(nlist)):]
# rss = rlist[int(ratio*len(nlist)):]
# zss = zlist[int(ratio*len(nlist)):]
# uss = ulist[int(ratio*len(nlist)):]
# 
# ffn = get_FF(nss)
# ffr = get_FF(rss)
# ffz = get_FF(zss)
# ffu = get_FF(uss)
# 
# =============================================================================
# =============================================================================
# print('ffo={}'.format(np.around(of,3)), 'ffz={}'.format(np.around(zf,3)), 'fb={}'.format(ftype))
# =============================================================================
###############################################################################
#
#                               Plot
#
###############################################################################

# =============================================================================
# fig, ax = plt.subplots(3,1)
# =============================================================================

# =============================================================================
# fs = 10  # font size
# 
# fig, ax = plt.subplots(4, 1, figsize = (10,7))  # Adjust figure size if needed
# 
# ax[0].step(tlist, nlist, color='#ff7f0e', where='post',
#            label='noff = {}'.format(np.around(ffn,3)))
# ax[0].set_ylabel('occupied\nsite', fontsize=fs)
# ax[0].set_xticks([])
# d=10
# ax[0].set_ylim([-d, np.max(nlist)+d])
# ax[0].legend()
# =============================================================================
# =============================================================================
# for ap in APlist:
#     ax[0].axvline(x=ap, color='k', alpha = 0.3)
# =============================================================================

# =============================================================================
# ax[1].step(tlist, ulist, color='#1f77b4', where='post', 
#            label='nuff = {}'.format(np.around(ffu,3)))
# ax[1].set_ylabel('unoccupied\nsite', fontsize=fs)
# ax[1].tick_params(axis='both', which='major', labelsize=fs)
# ax[1].tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
# ax[1].legend()
# 
# ax[2].step(tlist, rlist, color='red', where='post', 
#            label='nrff = {}'.format(np.around(ffr,3)))
# ax[2].set_ylabel('repair\nsite', fontsize=fs)
# ax[2].tick_params(axis='both', which='major', labelsize=fs)
# ax[2].tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
# ax[2].legend()
# 
# ax[3].step(tlist, zlist, color='green', where='post',
#            label='zff = {}'.format(np.around(ffz,3)))
# ax[3].set_ylabel('neurotrans-\nmitters', fontsize=fs)
# ax[3].set_xlabel('time (sec)', fontsize=fs)
# ax[3].tick_params(axis='both', which='major', labelsize=fs)
# ax[3].legend()
# 
# plt.show()
# =============================================================================

# How much do these curves deviate when I'm using deterministic repair times
# and increasing the value of kr?

def get_ff_sim():
    ratio = 0.2
    keq=5
    # 1/keq = 1/k + 1/kr
    # k = 1/(1/keq - 1/kr)
    krinf = np.inf
    kinf = 1/(1/keq-1/krinf)
    tlist, n_inf_list, r_inf_list, z_inf_list, APlist = \
        simulate_kr_inf(f, pr, M, n, r, z, kinf, k1, kb, krinf, gammaz, cz, ftype, tmax)
    
    n_inf_ss = n_inf_list[int(ratio*len(n_inf_list)):]
    z_inf_ss = z_inf_list[int(ratio*len(z_inf_list)):]
    
    ff_n_sim=get_FF(n_inf_ss)
    ff_z_sim=get_FF(z_inf_ss)
    
    ff_n_eq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))
    return ff_n_sim

keq=5
ntests=15
R=[]
for i in range(ntests):
    print(i, ntests)
    R.append(get_ff_sim())

Rmean = np.mean(R)
RCI = np.sqrt(np.var(R))/np.sqrt(ntests)

ff_n_eq=(1 - (keq *M)/(keq + f* pr) + (2 *keq* (-1 + M))/(2* keq - f *(-2 + pr)* pr))
#%%

nruns=5
krlist = np.linspace(keq+0.01,1000,100)
nomean = np.zeros((nruns, len(krlist)))
zmean = np.zeros((nruns, len(krlist)))

for i in range(nruns):
    print(i, nruns)
    for j in range(len(krlist)):
        print(j, len(krlist))
        result_j = simulate(f,pr, M, nu, no, nr, z, 1/(1/keq - 1/krlist[j]), 
                       k1, kb, krlist[j], gammaz,
                       cz, ftype, tmax)
            
        nomean[i,j]=get_FF(result_j[2])
        zmean[i,j]=get_FF(result_j[4])

    
fo = np.mean(nomean, 0) / ff_no_sim
fz = np.mean(zmean, 0) / ff_z_sim

fs2=15
plt.title('f={}, pr={}, k={}, kr={}, gammaz={}, cz={}, fb={}'.format(
    f, pr, k, kr,gammaz,cz, ftype))
plt.plot(krlist, fo, label='no')
plt.plot(krlist, fz, label='z')
plt.xlabel('Repair rate, kr', fontsize = fs2)
plt.ylabel('Fano factor', fontsize = fs2)
plt.tick_params(axis='both', labelsize = fs2)
plt.legend(fontsize = fs2-2)
plt.show()

#%%
# =============================================================================
# fu=[]
# fo=[]
# fr=[]
# 
# for j in range(20):
#     print(j)
#     k1list = np.linspace(0, 20, 100)
# 
#     results = [simulate(f,pr, M, nu, no, nr, z, k, k1, kb, kr, gammaz,
#         cz, ftype, tmax, AP=True, deterministic=False, zmean=zmean, zth=zth) 
#                for i in range(len(k1list))]
# 
#     #results[i][j], ith value of k1, jth return value of simulate where 0 is tlist, 1 is nuhist.
#     ffu = [get_FF(results[i][1]) for i in range(len(results))]
#     ffo = [get_FF(results[i][2]) for i in range(len(results))]
#     ffr = [get_FF(results[i][3]) for i in range(len(results))]
# 
#     fu.append(ffu)
#     fo.append(ffo)
#     fr.append(ffr)
# 
# fumean=np.mean(fu,0)
# fomean=np.mean(fo,0)
# frmean=np.mean(fr,0)
# 
# fs2=15
# plt.title('f={}, pr={}, k={}, kr={}, gammaz={}, cz={}, fb={}'.format(
#     f, pr, k, kr,gammaz,cz, ftype))
# plt.plot(k1list, fumean, label='unoccupied')
# plt.plot(k1list, fomean, label='occupied')
# plt.plot(k1list, frmean, label='repair')
# plt.xlabel('Feedback strength, k1', fontsize = fs2)
# plt.ylabel('Fano factor', fontsize = fs2)
# plt.tick_params(axis='both', labelsize = fs2)
# plt.legend(fontsize = fs2-2)
# plt.show()
# =============================================================================
