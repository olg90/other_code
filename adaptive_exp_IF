import numpy as np
import matplotlib.pyplot as plt



# Tonic firing
taum=20e-3
R=500e6
Delta_T=2e-3 # sharpness of AP
vth=-50e-3
# Adaption current parameters
tauw=30e-3
a=0
b=60e-12
vrest=-70e-3
vr=-55e-3
v=vrest # membrane potential
w=-0 # adaption current

# =============================================================================
# # Adapting
# taum=20e-3
# R=500e6
# Delta_T=2e-3 # sharpness of AP
# vth=-50e-3
# # Adaption current parameters
# tauw=100e-3
# a=0
# b=5e-12
# vr=-55e-3
# vrest=-70e-3
# v=vrest # membrane potential
# w=-0 # adaption current
# =============================================================================

# =============================================================================
# # Init. burst
# taum=5e-3
# R=500e6
# Delta_T=2e-3 # sharpness of AP
# vth=-50e-3
# # Adaption current parameters
# tauw=100e-3
# a=0.5-9
# b=7e-12
# vr=-51e-3
# vrest=-70e-3
# v=vrest # membrane potential
# w=-0 # adaption current
# =============================================================================

# =============================================================================
# # Bursting
# taum=5e-3
# R=500e6
# Delta_T=2e-3 # sharpness of AP
# vth=-50e-3
# # Adaption current parameters
# tauw=100e-3
# a=-0.5-9
# b=7e-12
# vr=-46e-3
# vrest=-70e-3
# v=vrest # membrane potential
# w=-0 # adaption current
# =============================================================================

tmax=3
dt=0.001

times = np.arange(0, tmax, dt)
vlist=np.zeros(len(times))
wlist=np.zeros_like(vlist)
vlist[0]=v
wlist[0]=w
I = np.zeros_like(times)

I0=65e-12
t0=1
t1=2
tlen=0.5
I[int(t0/dt):int((t1)/dt)]=I0

tflist=[]
tf=np.inf

for i in range(1,len(times)):
    dvdt=1/taum*(-(v-vrest)+Delta_T*np.exp((v-vth)/Delta_T)-R*w+R*I[i])
# =============================================================================
#     dvdt=1/taum*(R*I[i]+(Em-v+Delta_T*np.exp((v-vth)/Delta_T))-R*w)
# =============================================================================
    dwdt=1/tauw*(a*(v-vrest)-w)
    
    v=v+dvdt*dt
    w=w+dwdt*dt
    
    if v >= vth:
        v=vr
        w=w+b
        
        tflist.append(i*dt)
        tf=i*dt
    
    vlist[i]=v
    wlist[i]=w

fig, ax = plt.subplots(3,1, figsize=(5,3))
fig.suptitle('Adaptive exponential integrate and fire model')
ax[0].plot(times, vlist)
ax[0].plot(times, vth*np.ones(len(times)), color='k')
ax[1].plot(times, wlist, color='green')
ax[2].plot(times, I, color='red')
# =============================================================================
# for tf in tflist:
#     ax[0].axvline(tf, color='r', alpha=0.5)
# =============================================================================

ax[0].set_ylabel('membrane\npotential')
ax[1].set_ylabel('adaptation\ncurrent')
ax[2].set_ylabel('input\ncurrent')

ax[0].set_ylim([np.min(vlist)-0.01, vth+0.01])

ax[0].set_xticks([])
ax[1].set_xticks([])
ax[2].set_xlabel('time (ms)')
plt.show()
