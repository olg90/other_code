import numpy as np
import matplotlib.pyplot as plt

def run_test(f, pr, n, vth, tauv, delta_t, tmax):

    vhist=[]
    thist=[]
    AP_times = []
    burstlist=[]
    
    nbursts=0
    tcurr = 0
    v = 0
    n = 100
    timer = delta_t
    while tcurr < tmax:
        t0=np.random.exponential(1/f)
        t1=timer
        
        if t0<t1:
            b=np.random.binomial(n, pr) # Number released
# =============================================================================
#             b=np.random.geometric(pr) # Number released
# =============================================================================
            v+=b
            tmin=t0
            timer -= tmin
            nbursts+=1
        else:
            tmin=t1
            vhist.append(v)
            thist.append(tcurr)
            timer = delta_t
        tcurr += tmin
        v = v*np.exp(-tmin/tauv)
        if v >= vth:
            v = 0
            AP_times.append(tcurr)
            burstlist.append(nbursts)
            nbursts=0
    vhist = np.array(vhist) # data array
    AP_times = np.array(AP_times)
    inter_AP_times = np.diff(AP_times)
    if len(inter_AP_times) < 2:
        mean_inter_AP_time = np.nan
        CVT2 = np.nan
    else:
        mean_inter_AP_time = np.mean(inter_AP_times)
        CVT2 = np.var(inter_AP_times) / mean_inter_AP_time**2
    return {'vhist': vhist,
            'thist':np.array(thist),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'mean_T':mean_inter_AP_time, 
            'CVT2':CVT2,
            'nbursts':np.mean(burstlist)}

def teq(f, tauv, vth, n, pr, M, mu):
    Mval=M(f,tauv)
# =============================================================================
#     # First approximation, 0th order
#     return 1/f/(np.log(Mval))*np.log(vth*(Mval-1)/(mu)+1)
# =============================================================================
# =============================================================================
#     # Taylor series approximation at 0, 1st order
#     return 1/f*vth*(Mval-1)/mu/np.log(Mval)
# =============================================================================
# =============================================================================
#     # Taylor series approximation on T
#     return (1/f)**2*vth*tauv/(mu*np.log(1/(1-tauv*1/f)))
# =============================================================================
# =============================================================================
#     return (1-np.exp(-tauv*1/f))*vth/(mu*tauv)
# =============================================================================

    Tmean = 1/f
    # T3
# =============================================================================
#     return (Tmean**2*vth)/(mu*np.log(1/(1 - tauv*Tmean)))
# =============================================================================
    # T4
# =============================================================================
#     return ((1 - np.exp(-(tauv*Tmean)))*vth)/(mu*tauv)
# =============================================================================
# =============================================================================
#     # T5
#     return (Tmean*np.log(1 - (tauv*Tmean*vth)/mu))/np.log(1 - tauv*Tmean)
# =============================================================================
    # T6
    return np.log(1/(1 - ((1 - np.exp(-(tauv*Tmean)))*vth)/mu))/tauv

def M(f, tauv):
    return f/(f+tauv)

###############################################################################
#
#                               Main Code
#
###############################################################################

# =============================================================================
# plt.plot(teq(np.linspace(0,10,100), 1, 100, 100, 0.2, M, 20))
# =============================================================================

tmax = 200
f=100
pr = 0.2
tauv = 1
vth = 100
n=100

mu=n*pr

delta_t = 0.001

# =============================================================================
# res=run_test(f, pr, n, vth, tauv, delta_t, 1)
# plt.plot(res['thist'], res['vhist'])
# =============================================================================

flist=np.linspace(1, 100,100)
blist=[]
tf=[]
navgs=1
for i in range(navgs):
    Tlist=[]
    blisti=[]
    for j,f in enumerate(flist):
        print(j, len(flist), i, navgs)
        result = run_test(f, pr, n, vth, tauv, delta_t, tmax)
        Tlist.append(result['mean_T'])
        blisti.append(result['nbursts'])
    tf.append(Tlist)
    blist.append(blisti)

tf=np.array(tf)
burstfs=np.array(blist)
# =============================================================================
# print(np.mean(Tlist), teq(f, tauv, vth, n, pr, M))
# =============================================================================
tf=np.mean(tf,0)
burstfs=np.mean(burstfs, 0)

fig, ax = plt.subplots(2, 1)
ax[0].set_title('b-binomial(n={},pr={}) , Ti-exponential(f)'.format(n, pr))
ax[0].plot(flist, tf, label='simulations')
ax[0].plot(flist, teq(flist, tauv, vth, n, pr, M, mu), label='equation')
# =============================================================================
# ax[0].set_xscale('log')  
# =============================================================================
ax[0].set_ylabel('First passage time')
# =============================================================================
# ax[0].set_ylim([0, 3])
# =============================================================================
# =============================================================================
# ax[0].set_xlim([0, 100]) 
# =============================================================================
ax[0].plot([], [], ' ', label='vth={}, tauv={}'.format(vth, tauv))
ax[0].legend()

ax[1].plot(flist, burstfs)
ax[1].set_ylabel('number of bursts')
ax[1].set_xlabel('input frequency (exponential)')
plt.show()
